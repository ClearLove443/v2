import{_ as a,V as s,W as t,a0 as e}from"./framework-e0f7ab62.js";const p={};function o(c,n){return s(),t("div",null,[...n[0]||(n[0]=[e(`<p>在使用注解生成 Bean 的时候，如果没有指定 Bean 的名称，如@Componet(&quot;mytable&quot;)，则 Spring 会使用默认的名称生成策略，具体源码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationBeanNameGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">BeanNameGenerator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMPONENT_ANNOTATION_CLASSNAME</span> <span class="token operator">=</span> <span class="token string">&quot;org.springframework.stereotype.Component&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateBeanName</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> definition<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token function">determineBeanNameFromAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Explicit bean name found.</span>
                <span class="token keyword">return</span> beanName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Fallback: generate a unique default bean name.</span>
        <span class="token keyword">return</span> <span class="token function">buildDefaultBeanName</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Derive a bean name from one of the annotations on the class.
     * <span class="token keyword">@param</span> <span class="token parameter">annotatedDef</span> the annotation-aware bean definition
     * <span class="token keyword">@return</span> the bean name, or <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> if none is found
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">determineBeanNameFromAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span> annotatedDef<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationMetadata</span> amd <span class="token operator">=</span> annotatedDef<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> amd<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> amd<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStereotypeWithNameValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> amd<span class="token punctuation">.</span><span class="token function">getMetaAnnotationTypes</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Stereotype annotations suggest inconsistent &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;component names: &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; versus &#39;&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    beanName <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> beanName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Check whether the given annotation is a stereotype that is allowed
     * to suggest a component name through its annotation <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token keyword">@param</span> <span class="token parameter">annotationType</span> the name of the annotation class to check
     * <span class="token keyword">@param</span> <span class="token parameter">metaAnnotationTypes</span> the names of meta-annotations on the given annotation
     * <span class="token keyword">@param</span> <span class="token parameter">attributes</span> the map of attributes for the given annotation
     * <span class="token keyword">@return</span> whether the annotation qualifies as a stereotype with component name
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isStereotypeWithNameValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationType<span class="token punctuation">,</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> metaAnnotationTypes<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">boolean</span> isStereotype <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">COMPONENT_ANNOTATION_CLASSNAME</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>metaAnnotationTypes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> metaAnnotationTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">COMPONENT_ANNOTATION_CLASSNAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                annotationType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;javax.annotation.ManagedBean&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                annotationType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;javax.inject.Named&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>isStereotype <span class="token operator">&amp;&amp;</span> attributes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> attributes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Derive a default bean name from the given bean definition.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The default implementation simply builds a decapitalized version
     * of the short class name: e.g. &quot;mypackage.MyJdbcDao&quot; -&gt; &quot;myJdbcDao&quot;.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that inner classes will thus have names of the form
     * &quot;outerClassName.innerClassName&quot;, which because of the period in the
     * name may be an issue if you are autowiring by name.
     * <span class="token keyword">@param</span> <span class="token parameter">definition</span> the bean definition to build a bean name for
     * <span class="token keyword">@return</span> the default bean name (never <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>)
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">buildDefaultBeanName</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> shortClassName <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getShortName</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span>shortClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 在给 Bean 生成名字的时候，会调用 generateBeanName 方法，这个方法会先尝试获取注解括号中的名字，也就是用户自定义的名称，如果没有获取到，则调用 buildDefaultBeanName，用于生成默认的名称，这个方法会使用 Introspector.decapitalize(shortClassName);这个方法的 API 文档如下：</p><blockquote><p>Utility method to take a string and convert it to normal Java variable name capitalization. This normally means converting the first character from upper case to lower case, but in the (unusual) special case when there is more than one character and both the first and second characters are upper case, we leave it alone. Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays as &quot;URL&quot;. Parameters: name - The string to be decapitalized. Returns: The decapitalized version of the string.</p></blockquote><p>最重要的一句话翻译过来是说：如果 name 的开头两个及两个以上字符为大写，则不作处理并直接返回原来的名字，否则将名称的首字母小写后返回。</p>`,5)])])}const i=a(p,[["render",o],["__file","springboot_bean_default_name.html.vue"]]);export{i as default};
