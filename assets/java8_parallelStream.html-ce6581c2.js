import{_ as o,D as c,V as l,W as u,a0 as e,Y as a,Z as t,$ as p}from"./framework-7c77a285.js";const i="/v2/40c3b318a03e4490b3fb3753a2d0e78f_tplv-k3u1fbpfcp-watermark.png",r="/v2/fc97c5dceef24e599ba5ecb96669eace_tplv-k3u1fbpfcp-watermark.png",k={},d={href:"https://codereview.stackexchange.com/questions/60401/using-java-8-parallel-streams",target:"_blank",rel:"noopener noreferrer"},m={href:"https://stackoverflow.com/questions/22350288/parallel-streams-collectors-and-thread-safety",target:"_blank",rel:"noopener noreferrer"},v={href:"http://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247486643&idx=1&sn=d5bbaf6ff97c6ba04ff037bf92a36d62&chksm=eb538985dc24009384af9a0fe196c8c97a7d0bb89cd6703e6b3dbe1bc6e7001727d9d932a260&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"};function f(g,n){const s=c("ExternalLinkIcon");return l(),u("div",null,[n[4]||(n[4]=e(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>Java8 的 stream 接口极大地减少了 for 循环写法的复杂性，stream 提供了 map/reduce/collect 等一系列聚合接口，还支持并发操作：parallelStream。</p><p>在爬虫开发过程中，经常会遇到遍历一个很大的集合做重复的操作，这时候如果使用串行执行会相当耗时，因此一般会采用多线程来提速。Java8 的 paralleStream 用 fork/join 框架提供了并发执行能力。但是如果使用不当，很容易陷入误区。</p><h2 id="java8-的-parallestream-是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#java8-的-parallestream-是线程安全的吗" aria-hidden="true">#</a> Java8 的 paralleStream 是线程安全的吗</h2><p>一个简单的例子,在下面的代码中采用 stream 的 forEach 接口对 1-10000 进行遍历，分别插入到 3 个 ArrayList 中。其中对第一个 list 的插入采用串行遍历，第二个使用 paralleStream，第三个使用 paralleStream 的同时用 ReentryLock 对插入列表操作进行同步：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list1<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list2<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list4 <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
    list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  list4 <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;串行执行的大小：&quot;</span> <span class="token operator">+</span> list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;并行执行的大小：&quot;</span> <span class="token operator">+</span> list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加锁并行执行的大小：&quot;</span> <span class="token operator">+</span> list3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;collect并行执行的大小：&quot;</span> <span class="token operator">+</span> list3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>串行执行的大小：10000
并行执行的大小：984
加锁并行执行的大小：10000
collect并行执行的大小：10000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且每次的结果中并行执行的大小不一致，而串行和加锁后的结果一直都是正确结果。显而易见，stream.parallel.forEach()中执行的操作并非线程安全。</p><p>那么既然 paralleStream 不是线程安全的，是不是在其中的进行的非原子操作都要加锁呢？我在 stackOverflow 上找到了答案：</p>`,10)),a("ul",null,[a("li",null,[a("p",null,[a("a",d,[n[0]||(n[0]=t("using-java-8-parallel-streams")),p(s)])])]),a("li",null,[a("p",null,[a("a",m,[n[1]||(n[1]=t("parallel-streams-collectors-and-thread-safety")),p(s)])])])]),n[5]||(n[5]=a("p",null,"在上面两个问题的解答中，证实 paralleStream 的 forEach 接口确实不能保证同步，同时也提出了解决方案：使用 collect 和 reduce 接口。",-1)),a("p",null,[a("a",v,[n[2]||(n[2]=t("parallelism")),p(s)])]),n[6]||(n[6]=e(`<p>在 Javadoc 中也对 stream 的并发操作进行了相关介绍：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    The Collections Framework provides synchronization wrappers, which add automatic synchronization to an arbitrary collection, making it thread-safe.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Collections 框架提供了同步的包装，使得其中的操作线程安全。</p><p>那么 reduce 也能保证线程安全吗，我们在进行如下测试。</p><h2 id="reduce-示例" tabindex="-1"><a class="header-anchor" href="#reduce-示例" aria-hidden="true">#</a> reduce 示例</h2><p>现在给你一组指定的数组，需要你计算出每个数字的乘积。这种情况我们采用 stream 可以用一个链式代码直接一步到位，省去了写 for 循环的这样臃肿的代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们拿到的结果还需要乘以一个固定的数字 m ，那么我们只需要修改代码为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数字过多串行流的顺序执行会不会导致效率很低呢？于是我又尝试采用 parallel() 来执行程序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意外的发现，当 m=1 的时候，串行流和并行流取得的结果是一致的，而当 m 不为 1 时，两者的结果并不匹配。比如当 m=3 的时候，串行流的运算结果为 2578991184 而并行流的运算结果为 1880084573136 。是什么导致了这样的误差呢？</p><h2 id="forkjoinpool" tabindex="-1"><a class="header-anchor" href="#forkjoinpool" aria-hidden="true">#</a> ForkJoinPool</h2><p>Java Streams 默认使用同一个 ForkJoinPool 执行并行流。 ForkJoinPool 主要就是将任务递归拆分为多个块，然后可以独立地计算每个块。</p><p>Stream.reduce 顺序执行的时候是这样的：</p><figure><img src="`+i+'" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>并行流的算法其实也非常简单，我们假设任务仅被分成 2 部分：</p><figure><img src="'+r+`" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><p>每个块都多乘了一次 m ，并行流给每个任务块都应用了给定的标识 m 。知道了这个刚刚的 bug 我们也就可以解决了。我们可以将每个标识 m 都采用 1 ，乘 1 并不会影响程序结果，然后得到最后的结果只会再乘以 m ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">*</span> next<span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><p>再使用流的时候，有哪些小细节应该注意呢。</p><ul><li><p>应用到并行流的任何操作都必须是符合缩减操作的三个约束条件，无状态，不干预，关联性！因为这三大约束确保在并行流上执行操作的结果和在顺序流上执行的结果是相同的</p></li><li><p>paralleStream 里直接去修改变量是非线程安全的，但是采用 collect 和 reduce 操作就是满足线程安全的了。</p></li><li><p>在采用并行流收集元素到集合中时，最好调用 collect 方法，一定不要采用 Foreach 方法或者 map 方法。</p></li><li><p>当对方法替换的同时，必须关注方法处理的过程中，是否用到线程不安全的类型例如 HashMap,ArrayList 等待，方法内部使用不会出现线程安全问题，当变量在方法外部定义尤为重要，使用并行流需谨慎，时刻考虑线程安全问题。否则可能造成程序死锁，或数据的准确性。造成的后果完全取决于使用非线程安全类的效果。</p></li><li><p>parallelStream 默认采用 forkjoin 底层实现，线程池的数量取决于计算机的核数。 比如当数据量不大时，顺序执行往往比并行执行更快，毕竟准备线程池和相关资源也是需要时间的。 再比如当任务涉及到 I/O 操作并且任务之间不互相依赖时，那么并行化就是一个不错的选择。</p></li></ul><h3 id="reduce-应当可拆分" tabindex="-1"><a class="header-anchor" href="#reduce-应当可拆分" aria-hidden="true">#</a> Reduce 应当可拆分</h3><p>如果不确定流是串行流（比如它作为函数参数来提供），则 reduce 函数的 identity 不应影响单个任务块的结果。即求和函数的 identity 必须为 0 ，而求乘积的 identity 必须为 1。</p><h3 id="合理采用并行流" tabindex="-1"><a class="header-anchor" href="#合理采用并行流" aria-hidden="true">#</a> 合理采用并行流</h3><p>并不是所有流操作都应该并行化。例如 map ，flatMap 和 filter 是无状态的，因此我们可以采用并行流的做法。而 sort ，distinct 和 limit 不但不会带来性能提升，反而可能会引发错误。 并且，并行化的有效性在很大程度上取决于流的来源。 ArrayList ，array 或 IntStream.range 支持随机访问，这意味着它们可以轻松拆分。但是 LinkedList 分解需要 O(n) 时间。还有 Stream.iterate 和 BufferedReader 也要尽量避免采用并行流，因为它们的开头都有未知的长度，因此很难估算拆分来源。</p><h3 id="编写单元测试" tabindex="-1"><a class="header-anchor" href="#编写单元测试" aria-hidden="true">#</a> 编写单元测试</h3><p>并行流虽然具备潜在的性能优势，但是同时也可能带来一些致命的错误，因此，每次将串行流替换为并行流时，为了确保功能未被破坏。需要编写一定的单元侧试。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,30)),a("ul",null,[a("li",null,[a("a",b,[n[3]||(n[3]=t("跟我学 Java 8 新特性之 Stream 流（四）并行流")),p(s)])])])])}const y=o(k,[["render",f],["__file","java8_parallelStream.html.vue"]]);export{y as default};
