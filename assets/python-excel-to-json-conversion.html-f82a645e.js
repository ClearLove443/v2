import{_ as t,D as o,V as p,W as i,Y as s,Z as a,$ as l,a0 as u}from"./framework-e0f7ab62.js";const r="/v2/python-excel-file-to-json-example.png.webp",c={},d={href:"https://www.journaldev.com/33306/pandas-read_excel-reading-excel-file-in-python",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const e=o("ExternalLinkIcon");return p(),i("div",null,[n[3]||(n[3]=s("p",null,"There are many ways to convert an excel file to JSON data. In this tutorial, we will look into two python modules to convert excel files to JSON.",-1)),n[4]||(n[4]=s("ol",null,[s("li",null,"Pandas"),s("li",null,"excel2json-3 (Not suggested)")],-1)),n[5]||(n[5]=s("h2",{id:"converting-excel-sheet-to-json-string-using-pandas-module",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#converting-excel-sheet-to-json-string-using-pandas-module","aria-hidden":"true"},"#"),a(" Converting Excel Sheet to JSON String using Pandas Module")],-1)),s("p",null,[n[1]||(n[1]=a("Pandas module provides functions to read excel sheets into DataFrame object. There are many options to specify headers, read specific columns, skip rows, etc. You can read more about it at ",-1)),s("a",d,[n[0]||(n[0]=a("Pandas read_excel() – Reading Excel File in Python",-1)),l(e)]),n[2]||(n[2]=a(".",-1))]),n[6]||(n[6]=u(`<p>We can use the to_json() function to convert the DataFrame object to JSON string. Let’s look at a simple example to read the “Employees” sheet and convert it to JSON string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> pandas

excel_data_df <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;records.xlsx&#39;</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">&#39;Employees&#39;</span><span class="token punctuation">)</span>
json_str <span class="token operator">=</span> excel_data_df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Excel Sheet to JSON:\\n&#39;</span><span class="token punctuation">,</span> json_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Excel Sheet to JSON:
 {&quot;EmpID&quot;:{&quot;0&quot;:1,&quot;1&quot;:2,&quot;2&quot;:3},&quot;EmpName&quot;:{&quot;0&quot;:&quot;Pankaj&quot;,&quot;1&quot;:&quot;David Lee&quot;,&quot;2&quot;:&quot;Lisa Ray&quot;},&quot;EmpRole&quot;:{&quot;0&quot;:&quot;CEO&quot;,&quot;1&quot;:&quot;Editor&quot;,&quot;2&quot;:&quot;Author&quot;}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>So, the JSON data is created with the orientation of columns. If you want to create the JSON string with row-wise orientation, pass the “orient” parameter value as “records”.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>json_str <span class="token operator">=</span> excel_data_df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">&#39;records&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
Excel Sheet to JSON:
 [{&quot;EmpID&quot;:1,&quot;EmpName&quot;:&quot;Pankaj&quot;,&quot;EmpRole&quot;:&quot;CEO&quot;},{&quot;EmpID&quot;:2,&quot;EmpName&quot;:&quot;David Lee&quot;,&quot;EmpRole&quot;:&quot;Editor&quot;},{&quot;EmpID&quot;:3,&quot;EmpName&quot;:&quot;Lisa Ray&quot;,&quot;EmpRole&quot;:&quot;Author&quot;}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="converting-excel-file-to-json-files-using-excel2json-3-module" tabindex="-1"><a class="header-anchor" href="#converting-excel-file-to-json-files-using-excel2json-3-module" aria-hidden="true">#</a> Converting Excel File to JSON Files using excel2json-3 Module</h2><p>It’s a very simple module to convert excel files to JSON files. The contents from the excel sheet are converted to JSON string and saved in a file.</p><p>The name of the files is derived from the excel sheet names. So, if there are two sheets with the name “Numbers” and “Cars”, the JSON files will be named as Numbers.json and Cars.json respectively.</p><p>The module supports both .xls and .xlsx file formats for conversion. We can read the excel file from the file system as well as the URL.</p><p>We can install this module using the PIP command.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> excel2json-3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For our example, I have created an excel file named “records.xlsx” having three sheets.</p><figure><img src="`+r+`" alt="excel" tabindex="0" loading="lazy"><figcaption>excel</figcaption></figure><p>Here is the script to convert this excel file to JSON files.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> excel2json
excel2json<span class="token punctuation">.</span>convert_from_file<span class="token punctuation">(</span><span class="token string">&#39;records.xlsx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The script creates three JSON files.</p><p>Employees.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;EmpID&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pankaj&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpRole&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CEO&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;EmpID&quot;</span><span class="token operator">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;David Lee&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpRole&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Editor&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;EmpID&quot;</span><span class="token operator">:</span> <span class="token number">3.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Lisa Ray&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;EmpRole&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Author&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cars.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;Car Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Honda City&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;City&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Maker&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Honda&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Price&quot;</span><span class="token operator">:</span> <span class="token string">&quot;20,000 USD&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;Car Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bugatti Chiron&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Chiron&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Maker&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bugatti&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Price&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3 Million USD&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;Car Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ferrari 458&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Model&quot;</span><span class="token operator">:</span> <span class="token number">458.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Maker&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ferrari&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Car Price&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2,30,000 USD&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Numbers.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;1.0&quot;</span><span class="token operator">:</span> <span class="token number">3.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;2.0&quot;</span><span class="token operator">:</span> <span class="token number">4.0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;1.0&quot;</span><span class="token operator">:</span> <span class="token string">&quot;N1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;2.0&quot;</span><span class="token operator">:</span> <span class="token string">&quot;N2&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;1.0&quot;</span><span class="token operator">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;2.0&quot;</span><span class="token operator">:</span> <span class="token number">6.0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;1.0&quot;</span><span class="token operator">:</span> <span class="token number">7.0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;2.0&quot;</span><span class="token operator">:</span> <span class="token number">8.0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have to read the excel file from a URL, use convert_from_url() function.</p><h2 id="limitations-of-excel2json-3-module" tabindex="-1"><a class="header-anchor" href="#limitations-of-excel2json-3-module" aria-hidden="true">#</a> Limitations of excel2json-3 module</h2><ul><li>The plugin has very limited features.</li><li>There are no options to skip any sheet, rows, and columns. This makes it hard to use with bigger excel files.</li><li>The JSON is saved into files. Most of the times, we want to convert to JSON and use it in our program rather than saving it as a file.</li><li>The integers are getting converted to the floating point numbers.</li></ul>`,28))])}const q=t(c,[["render",v],["__file","python-excel-to-json-conversion.html.vue"]]);export{q as default};
