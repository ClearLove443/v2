import{_ as s,V as a,W as e,a0 as t}from"./framework-e0f7ab62.js";const o={};function c(p,n){return a(),e("div",null,[...n[0]||(n[0]=[t(`<h1 id="使用网络模式-network-host" tabindex="-1"><a class="header-anchor" href="#使用网络模式-network-host" aria-hidden="true">#</a> 使用网络模式：<code>--network=host</code></h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&quot;Host-Proxy-Test&quot;</span> ubuntu:16.04

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="docker-compose-方式" tabindex="-1"><a class="header-anchor" href="#docker-compose-方式" aria-hidden="true">#</a> docker-compose 方式</h1><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">user</span><span class="token punctuation">:</span> root <span class="token comment"># 为了避免一些权限问题 在这我使用了root</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 重启方式</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> jenkins/jenkins<span class="token punctuation">:</span>lts <span class="token comment"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> jenkins <span class="token comment"># 容器名称</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 卷挂载路径</span>
      <span class="token punctuation">-</span> /home/ubuntu/jenkins/jenkins_home/<span class="token punctuation">:</span>/var/jenkins_home <span class="token comment"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
      <span class="token punctuation">-</span> /usr/bin/docker<span class="token punctuation">:</span>/usr/bin/docker <span class="token comment"># 这是为了我们可以在容器内使用docker命令</span>
      <span class="token punctuation">-</span> /usr/local/bin/docker<span class="token punctuation">-</span>compose<span class="token punctuation">:</span>/usr/local/bin/docker<span class="token punctuation">-</span>compose
    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5)])])}const i=s(o,[["render",c],["__file","docker-container-proxy.html.vue"]]);export{i as default};
