import{_ as s,V as e,W as a,a0 as n}from"./framework-e0f7ab62.js";const l={};function i(o,t){return e(),a("div",null,[...t[0]||(t[0]=[n(`<ol><li>vi 或 vim</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim file1.txt  //直接创建并打开一个文件file1.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用 vim 编辑器编辑文本后，如果是新创建的文件，默认保存在当前目录下，如果想保存到指定目录下，可以在 vim 编辑器中，按 Esc 键切换到命令模式，然后用 w 命令写到指定目录下的指定新建文件，如写到/tmp/test.txt 文件，则在 vi 命令模式下输入:w /tmp/test.txt 写好后，在/tmp 目录下新的文件 test.txt 就被创建了。</p><ol start="2"><li>touch</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># touch file2.txt  //创建新的空文件file2.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>touch 的另一个作用是更改一个文件或目录的时间。</p><ol start="3"><li>echo</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo &quot;this is a new file&quot; &gt; file3.txt   //创建文件file3.txt并将this is a new file写入</span>
（说明：使用<span class="token operator">&gt;</span>指令覆盖文件原内容并重新输入内容，若文件不存在则创建文件。）
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo &quot;add contents&quot; &gt;&gt;file3.txt    //在已存在的文件补充写入新内容add contents</span>
（说明：使用<span class="token operator">&gt;&gt;</span>指令向文件追加内容，原内容将保存。）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拓展： Linux 中输出重定向&gt;和&gt;&gt;的区别，&gt;是覆盖，&gt;&gt;是追加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; 会重写文件，如果文件里面有内容会覆盖。
&gt;&gt; 追加文件。也就是如果文件里面有内容会把新内容追加到文件尾
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>less 、more 、cat 三者都是将文件内容输出到标准输出，其中 less 和 more 可以分页显示，cat 是显示全部。 三者可以根据已经存在的文件创建新的文件。假设已经存在文件 1.txt。 cat 1.txt &gt; 2.txt less 1.txt &gt; 3.txt more 1.txt &gt; 4.txt 此时创建的文件内容都和 1.txt 中文件内容相同。</li></ol><p>cat 命令可以一次显示整个文件，如果文件比较大，使用不是很方便；适用于文件内容少的情况。 cat 主要有三大功能： 1）一次显示整个文件:cat filename 2）从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件. 3）将几个文件合并为一个文件:cat file1 file2 &gt; file</p><p>more 命令可以让屏幕在显示满一屏幕时暂停，此时可按空格健继续显示下一个画面，或按 Q 键停止显示。</p><p>less 命令也可以分页显示文件，和 more 命令的区别就在于它支持上下键卷动屏幕，当结束浏览时，只要在 less 命令的提示符“: ”下按 Q 键即可。</p><ol start="5"><li>cd</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd &gt; file3.txt  //创建新的空文件file3.txt</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd &gt;&gt; file4.txt  //创建新的空文件file3.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>cd 最主要的作用是切换目录，在 cd 后面跟&gt;或&gt;&gt;再加上文件名就可以创建一个内容为空的文件。它和 echo 的区别之处在于 echo 可写文件内容，而 cd 并不能。</p>`,17)])])}const d=s(l,[["render",i],["__file","linux-creat-file.html.vue"]]);export{d as default};
