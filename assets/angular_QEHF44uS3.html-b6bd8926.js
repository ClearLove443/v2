import{_ as l,D as i,V as o,W as m,a0 as p,Y as n,Z as s,$ as e}from"./framework-e0f7ab62.js";const r={},c={href:"http://gitee.poetry/life",target:"_blank",rel:"noopener noreferrer"},u={href:"http://gitee.poetry",target:"_blank",rel:"noopener noreferrer"},d={href:"http://gitee.poetry/life",target:"_blank",rel:"noopener noreferrer"},k={href:"https://deepthan.gitee.io/poetry/life",target:"_blank",rel:"noopener noreferrer"},h={href:"https://link.juejin.cn/?target=http%3A%2F%2Fwww.backalleycoder.com%2F2016%2F05%2F13%2Fsghpa-the-single-page-app-hack-for-github-pages%2F",target:"_blank",rel:"noopener noreferrer"};function g(v,a){const t=i("ExternalLinkIcon");return o(),m("div",null,[a[12]||(a[12]=p(`<h1 id="_1-为什么要去除" tabindex="-1"><a class="header-anchor" href="#_1-为什么要去除" aria-hidden="true">#</a> 1. 为什么要去除？</h1><ul><li>Angular 官方指出：如果没有足够使用 hash 风格（#）的理由，还是尽量使用 HTML5 模式的路由风格；</li><li>如果配置了 hash 风格，在微信支付或是 Angular 的深路径依然会出 404 的问题；</li><li>当你需要使用 GA 等工具时，由于无法获取#号后的 URL，导致每次路由切换都给其发送一个路径；</li><li>&#39;#&#39;有点丑。</li></ul><h1 id="_2-怎样才能去除" tabindex="-1"><a class="header-anchor" href="#_2-怎样才能去除" aria-hidden="true">#</a> 2. 怎样才能去除？</h1><p>有四个方法：</p><ul><li>前端 + ngx</li><li>前端 + Apache</li><li>前端 + Tomcat</li><li>GithubPages / 码云 Pages + 404 页面</li></ul><h2 id="_2-1-前端" tabindex="-1"><a class="header-anchor" href="#_2-1-前端" aria-hidden="true">#</a> 2.1 前端</h2><p>index.html 的 head 里加</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>base href<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>app.module.ts</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">ROUTER_CONFIG</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.routes.ts&#39;</span><span class="token punctuation">;</span>
@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>
    RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token constant">ROUTER_CONFIG</span><span class="token punctuation">)</span>
   <span class="token comment">//  RouterModule.forRoot(ROUTER_CONFIG, { useHash: true } )   这样写是带#的</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app.routes.ts：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/router&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ROUTER_CONFIG</span><span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
   <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),n("p",null,[a[3]||(a[3]=s("如果只配置前端会怎么样？ 如果只配置前端虽然会去掉'#'但是一刷新页面就 404，路径解析上出错了。 Angular 是单页应用，它实现了前端路由功能，后台可以不再控制路由的跳转，将原本属于后端的业务逻辑全部丢给前端。 用户刷新页面时(",-1)),n("a",c,[a[0]||(a[0]=s("http://gitee.poetry/life",-1)),e(t)]),a[4]||(a[4]=s("), 请求是先被提交到了 WebServer 后台，后台路由没有对应页面的路由管理，就会出现 404 的错误。 用户如果是先访问首页(",-1)),n("a",u,[a[1]||(a[1]=s("http://gitee.poetry",-1)),e(t)]),a[5]||(a[5]=s("), 然后再跳转到 页面(",-1)),n("a",d,[a[2]||(a[2]=s("http://gitee.poetry/life",-1)),e(t)]),a[6]||(a[6]=s("), 则这个跳转是由 Angular 前台管理的 URL，访问是正常的。 那么我们让 WebServer 把属于 Angular 管理的路由 URL，都转发到 index.html 就可以解决 404 的问题了，也就是后面介绍的配置信息。 思考：hash 模式为什么不会 404？",-1))]),a[13]||(a[13]=p(`<h2 id="_2-2-ngx-配置" tabindex="-1"><a class="header-anchor" href="#_2-2-ngx-配置" aria-hidden="true">#</a> 2.2 ngx 配置</h2><p>带<code>***</code>的是需要自己配置 nginx.conf 文件内容</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>server <span class="token punctuation">{</span>
    listen 80;  <span class="token comment">#监听的端口号</span>
    server_name  my_server_name; <span class="token comment"># 服务器名称  ***</span>
    root   /projects/angular/myproject/dist;  <span class="token comment">#相对于nginx的位置 ***</span>
    index index.html; <span class="token comment">#如果index.html存在，就结束查找过程，把这个文件附加到请求的request_uri后面，并且发起一个内部的redirect。</span>
    location / <span class="token punctuation">{</span>  <span class="token comment"># / 是匹配所有的uri后执行下面操作</span>
        try_files $uri $uri/ /index.html; <span class="token comment">#try_files先寻找名为 $uri 文件，没有则寻找 $uri/ 文件，再没有就寻找/index.html</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),n("blockquote",null,[n("p",null,[a[8]||(a[8]=s("try_files 详细解释： 如请求的是",-1)),n("a",k,[a[7]||(a[7]=s("https://deepthan.gitee.io/poetry/life",-1)),e(t)]),a[9]||(a[9]=p(', <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mi>r</mi><mi>i</mi><mtext>则是‘</mtext><mi mathvariant="normal">/</mi><mi>l</mi><mi>i</mi><mi>f</mi><mi>e</mi><mtext>’</mtext><mo separator="true">,</mo><mtext>如果‘</mtext></mrow><annotation encoding="application/x-tex">uri则是‘/life’,如果‘</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">则是</span><span class="mord">‘/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord">’</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">如果</span><span class="mord">‘</span></span></span></span>uri’‘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mi>r</mi><mi>i</mi><mi mathvariant="normal">/</mi><mtext>’都找不到，就会</mtext><mi>f</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mtext>到</mtext><mi>t</mi><mi>r</mi><msub><mi>y</mi><mi>f</mi></msub><mi>i</mi><mi>l</mi><mi>e</mi><mi>s</mi><mtext>的最后一个选项</mtext><mi mathvariant="normal">/</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>h</mi><mi>t</mi><mi>m</mi><mi>l</mi><mtext>发起一个内部“子请求”，也就是相当于</mtext><mi>n</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>x</mi><mtext>发起一个</mtext><mi>H</mi><mi>T</mi><mi>T</mi><mi>P</mi><mtext>请求到</mtext><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mi>s</mi><mo>:</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>e</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>g</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>i</mi><mi>o</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>h</mi><mi>t</mi><mi>m</mi><mi>l</mi><mtext>。这个请求会被</mtext><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi mathvariant="normal">.</mi><mi>p</mi><mi>h</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">uri/’都找不到，就会 fall back 到 try_files 的最后一个选项 /index.html发起一个内部 “子请求”，也就是相当于 nginx 发起一个 HTTP 请求到https://deepthan.gitee.io/poetry/index.html。 这个请求会被 location ~ .php</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord">/’</span><span class="mord cjk_fallback">都找不到，就会</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord mathnormal">ba</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">es</span><span class="mord cjk_fallback">的最后一个选项</span><span class="mord">/</span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord">.</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">发起一个内部</span><span class="mord">“</span><span class="mord cjk_fallback">子请求</span><span class="mord">”</span><span class="mord cjk_fallback">，也就是相当于</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">in</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">发起一个</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.13889em;">TTP</span><span class="mord cjk_fallback">请求到</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ttp</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">//</span><span class="mord mathnormal">d</span><span class="mord mathnormal">ee</span><span class="mord mathnormal">pt</span><span class="mord mathnormal">han</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ee</span><span class="mord">.</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord">/</span><span class="mord mathnormal">p</span><span class="mord mathnormal">oe</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ry</span><span class="mord">/</span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord">.</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">。这个请求会被</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">oc</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace nobreak"> </span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">p</span></span></span></span> { ... } catch 住，也就是进入 FastCGI 的处理程序。而具体的 URI 及参数是在 REQUEST_URI 中传递给 FastCGI 和 WordPress 程序的，因此不受 URI 变化的影响。',5))])]),a[14]||(a[14]=p(`<h2 id="_2-3-apache" tabindex="-1"><a class="header-anchor" href="#_2-3-apache" aria-hidden="true">#</a> 2.3 Apache</h2><p>Apache 的根目录新建一个.htaccess 文件 RewriteEngine On</p><ul><li>如果请求的是现有资源，则按原样执行 RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]<br> RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d<br> RewriteRule ^ - [L]</li><li>如果请求的资源不存在，则使用 index.html RewriteRule ^ /index.html</li></ul><h2 id="_2-4-tomcat-配置" tabindex="-1"><a class="header-anchor" href="#_2-4-tomcat-配置" aria-hidden="true">#</a> 2.4 Tomcat 配置</h2><p>Tomcat/conf/web.xml 文件上添加</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-githubpages-码云-pages-404-页面" tabindex="-1"><a class="header-anchor" href="#_2-5-githubpages-码云-pages-404-页面" aria-hidden="true">#</a> 2.5 GithubPages / 码云 Pages + 404 页面</h2><p>对于 github pages 或码云 Pages 来说，我们没办法直接配置 Github pages，但可以在 commit 时添加一个 404 页。简单的解决方案如下： 我们在项目的根目录新建 404.html，把 index.html 中的内容完全复制到 404.html 中就可以了。这样做 github pages 仍然会在恰当的时候给出一个 404 响应，浏览器将会正确处理该页，并正常加载我们的应用。</p>`,8)),n("blockquote",null,[n("p",null,[a[11]||(a[11]=s("关于这方面的 hack： ",-1)),n("a",h,[a[10]||(a[10]=s("S(GH)PA: The Single-Page App Hack for GitHub Pages",-1)),e(t)])])]),a[15]||(a[15]=p(`<h1 id="_3-带-和不带-原理上有什么区别呢" tabindex="-1"><a class="header-anchor" href="#_3-带-和不带-原理上有什么区别呢" aria-hidden="true">#</a> 3. 带‘#’和不带‘#’原理上有什么区别呢？</h1><h2 id="_3-1-这个得先说下什么是前端路由" tabindex="-1"><a class="header-anchor" href="#_3-1-这个得先说下什么是前端路由" aria-hidden="true">#</a> 3.1 这个得先说下什么是前端路由：</h2><p>以前路由都是后台做的，通过用户请求的 url 导航到具体的 html 页面，现在我们在前端可以利用 Angular、vue、react 等通过配置文件，达到前端控制路由跳转的功能。 前端路由的实现方法：</p><ol><li><p>通过 hash 实现 当 url 的 hash 发生改变时，触发 hashchange 注册的回调（低版本没有 hashchange 事件，通过轮回检测 url 实现），回调中去进行不同的操作，进行不同的内容展示。 使用 hash 来实现的话，URI 规则中要带上#，路由中#后边的内容就是 hash，我们常说的锚点严格来说应该是页面中的 a[name]等元素。</p></li><li><p>HTML5 的 history api 操作浏览器的 session history 实现 基于 history 实现的路由中不带#，就是原始的路由</p></li></ol><h2 id="_3-2-angular-中的路由策略" tabindex="-1"><a class="header-anchor" href="#_3-2-angular-中的路由策略" aria-hidden="true">#</a> 3.2 Angular 中的路由策略</h2><p>angular2 提供的路由策略也是基于上面两个原理实现的，可以在@NgModule 中通过 providers 配置或 RouterModule.forRoot()配置： 1） 路由中有#</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span><span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span><span class="token punctuation">{</span>useHash<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span><span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span><span class="token punctuation">[</span>
     <span class="token punctuation">{</span>provide<span class="token operator">:</span> LocationStrategy<span class="token punctuation">,</span> useClass<span class="token operator">:</span> HashLocationStrategy<span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HashLocationStragegy 适用于基于锚点标记的路径，比如/#/**，后端只需要配置一个根路由即可。 2） html5 路由（无#） 改用 PathLocationStrategy（angular2 的默认策略，也就是 HTML5 路由），使用这个路由的常规路径不带#，这种策略需要后台配置支持，因为我们的应用是单页面应用，如果后台没有正确的配置，当用户在浏览器从一个路由跳往另外一个路由或者刷新时就会返回 404，需要在服务端里面覆盖所有的路由情况（后端可以通过 nginx 或者 apache 等配置）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span><span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>provide<span class="token operator">:</span> LocationStrategy<span class="token punctuation">,</span> useClass<span class="token operator">:</span> PathLocationStrategy<span class="token punctuation">}</span>
    <span class="token comment">// 这一行是可选的，因为默认的LocationStrategy是PathLocationStrategy</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改 index.html 中的 base href 属性，Angular 将通过这个属性来处理路由跳转</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在后端的服务器上，用下面的正则去匹配所有的页面请求导向 index.html 页面。 we must render the index.html file for any request coming with below pattern index.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-root</span><span class="token punctuation">&gt;</span></span>Loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vendor.bundle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.bundle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-前端路由优缺点" tabindex="-1"><a class="header-anchor" href="#_3-3-前端路由优缺点" aria-hidden="true">#</a> 3.3 前端路由优缺点</h2><ul><li>优点：</li></ul><ol><li>从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。</li><li>在某些场合中，用 ajax 请求，可以让页面无刷新，页面变了但 Url 没有变化，用户不能获取到想要的 url 地址，用前端路由做单页面网页就很好的解决了这个问题。</li></ol><ul><li>缺点： 使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。</li></ul>`,19))])}const x=l(r,[["render",g],["__file","angular_QEHF44uS3.html.vue"]]);export{x as default};
