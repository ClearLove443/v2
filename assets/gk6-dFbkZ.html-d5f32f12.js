import{_ as n,V as s,W as e,a0 as t}from"./framework-e0f7ab62.js";const i={};function l(o,a){return s(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="使用-docker-模式" tabindex="-1"><a class="header-anchor" href="#使用-docker-模式" aria-hidden="true">#</a> 使用 docker 模式</h1><h2 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token string">&#39;80:80&#39;</span> <span class="token parameter variable">--name</span> angular-ts-demo2 <span class="token parameter variable">-v</span> /home/ubuntu/docker/angular-ts-demo/dist/my-app:/usr/share/nginx/html <span class="token parameter variable">-v</span> /home/ubuntu/docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro <span class="token parameter variable">-d</span> nginx:mainline-alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h2><h1 id="使用-docker-compose-方式" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose-方式" aria-hidden="true">#</a> 使用 docker-compose 方式</h1><p>在项目根目录新建 docker-compose.yml 文件</p><h2 id="angular-1" tabindex="-1"><a class="header-anchor" href="#angular-1" aria-hidden="true">#</a> Angular</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ./www<span class="token punctuation">:</span>/usr/share/nginx/html
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;8080:80&quot;</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> NGINX_HOST=foobar.com
    <span class="token punctuation">-</span> NGINX_PORT=80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 cmd 执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;docker-compose.yml&quot;</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">--build</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><ol><li><p>容器目录不可以为相对路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker run -it -v /test:soft centos /bin/bash</span>
invalid value <span class="token string">&quot;/test:soft&quot;</span> <span class="token keyword">for</span> flag -v: soft is not an absolute path
See <span class="token string">&#39;docker run --help&#39;</span><span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接报错，提示 soft 不是一个绝对路径，所谓的绝对路径，必须以下斜线“/”开头。</p></li><li><p>宿主机目录如果不存在，则会自动生成 如果宿主机中存在/test 目录，首先删除它</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /test</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls /</span>
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it -v /test:/soft centos /bin/bash</span>
<span class="token punctuation">[</span>root@a487a3ca7997 /<span class="token punctuation">]</span><span class="token comment"># ls</span>
bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  soft  srv  sys  tmp  usr  var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看宿主机，发现新增了一个/test 目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls /</span>
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  <span class="token builtin class-name">test</span>  tmp  usr  var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,12)])])}const c=n(i,[["render",l],["__file","gk6-dFbkZ.html.vue"]]);export{c as default};
