import{_ as e,V as a,W as n,a0 as i}from"./framework-7c77a285.js";const t={};function l(d,s){return a(),n("div",null,s[0]||(s[0]=[i(`<p>有时候我们希望不用每次登录 linux 服务器都要输入密码，那么这个时候可以选择 ssh 密钥登录，就是 rsa 公钥放到服务器上，私钥放在客户端上，每次登录的时候，用密钥登录；这样更方便也更安全</p><ul><li>先生成一个 rsa 密钥对</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认生成的密钥文件在~/.ssh 目录下</p><ul><li>检查下.ssh 目录下 authorized_keys 文件是否存在，没有的话，创建一个,然后将 id_rsa.pub 的内容追加到 authorized_keys 文件尾</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">touch</span> authorized_keys
<span class="token comment"># 将id_rsa.pub的内容追加到authorized_keys</span>
<span class="token function">cat</span> id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改.ssh 的权限为 700, authorized_keys 的权限为 600 或者更严格的 400，否则登录的时候会提示 server refuse you key,</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh
<span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你要设置的用户不是 root,比如是 git 之类的 那么你要设置的.ssh 目录应该是 /home/git/.ssh, 并且要将.ssh 目录和 authorized_keys 文件的文件所有者改为 git</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> git:git .ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改下 ssh 的配置 /etc/ssh/sshd_config</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># RSAAuthentication yes</span>
PubkeyAuthentication <span class="token function">yes</span>
<span class="token comment"># The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2</span>
<span class="token comment"># but this is overridden so installations will only check .ssh/authorized_keys</span>
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一点很重要，在你配置密钥登录成功之前，千万不要太自信将 PasswordAuthentication 设置 no，否则你密钥登录不了，然后又禁止密码登录，就悲剧了 在密钥登录设置成功之后，可以将 PasswordAuthentication 设置为 no，禁用密码登录了，比较安全</p><ul><li><p>将私钥文件 id_rsa 拷贝到你的客户端 如果你是要在 windows 上使用 putty 客户端登陆 linux 服务器 那么你还需要将这个私钥稍微转换下 打开 putty key generator 工具 File -&gt; Load private key, 然后点 save private key, 就转换完毕，window 下私钥一般以.ppk 后缀结尾，比如另存为 id_rsa.ppk</p></li><li><p>putty 密钥登录 使用 putty 登录的时候，填好服务器地址之后，在 Connection -&gt; Data 界面，Auto-login username 填入你的用户名 Connection -&gt; SSh -&gt; Auth 界面，Private key file for authentication, browse 选择你的私钥文件 id_rsa.ppk， 然后你可以把这些配置 save 下，以后就不用每次都配置一遍；最后点 open,</p></li></ul>`,14)]))}const r=e(t,[["render",l],["__file","linux_ssh_add_privtekey.html.vue"]]);export{r as default};
