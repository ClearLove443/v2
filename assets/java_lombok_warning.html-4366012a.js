import{_ as n,V as s,W as t,a0 as e}from"./framework-e0f7ab62.js";const l={};function p(o,a){return s(),t("div",null,[...a[0]||(a[0]=[e(`<p>ombok 为我们提供了@Data 注解，帮助我们省略了@Setter,@Getter,@ToString 等注解，一般对于普通的实体类使用该注解，不会出现什么问题，但是当我们把这个注解，使用在派生类上，就出现了一个小问题。 @Data 注解的地方会出现警告：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Generating equals/hashCode implementation but without a call to superclass, even though this class
does not extend java.lang.Object. If this is intentional, add &#39;@EqualsAndHashCode(callSuper=false)&#39;
to your type.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是默认子类的 equals 和 hashCode 方法，不会包含或者考虑基类的属性。我们可以通过反编译工具查看项目 target/classes 目录下的 User.class 的 hashCode 方法，默认情况下属性都是使用的他自身的属性。 当我们根据警告提示，加上注解@EqualsAndHashCode(callSuper=true) ，警告消失。 这么一来，好像就解决了在继承情况下使用@Data 注解的警告问题。但是问题是，每一个继承的类，都需要这么来解决，也不是很方便。</p><p>另一种办法，就是通过自定义 lombok.config 文件来解决。 lombok.config 文件需要放在 src/main/java 文件夹下的目录中（也可以放在实体同级目录下），放在 src/main/resources 目录下，不会生效。下面，我们通过这种方式来解决这个警告的问题。</p><ol><li>新建 lombok.config 文件，然后配置:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>config.stopBubbling=true
lombok.equalsAndHashCode.callSuper=call
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>pom.xml 文件中需要加入如下插件：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
  		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
  		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以检验一下，警告是否就没有了。</p>`,9)])])}const i=n(l,[["render",p],["__file","java_lombok_warning.html.vue"]]);export{i as default};
