import{_ as o,D as p,V as c,W as i,Y as a,Z as e,$ as t,a0 as r}from"./framework-e0f7ab62.js";const l={},u={href:"https://www.baeldung.com/java-stack-heap",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.guru99.com/java-stack-heap.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.journaldev.com/4098/java-heap-space-vs-stack-memory",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.geeksforgeeks.org/reference-variable-in-java/",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const s=p("ExternalLinkIcon");return c(),i("div",null,[a("p",null,[a("a",u,[n[0]||(n[0]=e("java-stack-heap",-1)),t(s)]),a("a",d,[n[1]||(n[1]=e("java-stack-heap",-1)),t(s)]),a("a",h,[n[2]||(n[2]=e("Java Heap Space vs Stack – Memory Allocation in Java",-1)),t(s)]),a("a",k,[n[3]||(n[3]=e("Reference Variable in Java",-1)),t(s)])]),n[4]||(n[4]=r(`<h2 id="_1-overview" tabindex="-1"><a class="header-anchor" href="#_1-overview" aria-hidden="true">#</a> 1. Overview</h2><p>In this quick tutorial, we&#39;re going to see how to find the memory address of objects in Java.</p><p>Before going any further, it&#39;s worth mentioning that the memory layout of runtime data areas is not part of the JVM specification and is left to the discretion of the implementor. Therefore, each JVM implementation may have a different strategy to layout objects and arrays in memory. This will, in turn, affect the memory addresses.</p><p>In this tutorial, we&#39;re focusing on one specific JVM implementation: the HotSpot JVM. We also may use the JVM and HotSpot JVM terms interchangeably throughout the tutorial.</p><h2 id="_2-dependency" tabindex="-1"><a class="header-anchor" href="#_2-dependency" aria-hidden="true">#</a> 2. Dependency</h2><p>To find the memory address of objects in the JVM, we&#39;re going to use the Java Object Layout (JOL) tool. Therefore, we need to add the jol-core dependency:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-memory-address" tabindex="-1"><a class="header-anchor" href="#_3-memory-address" aria-hidden="true">#</a> 3. Memory Address</h2><p>To find the memory address of a particular object in the JVM, we can use the addressOf() method:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> answer <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The memory address is &quot;</span> <span class="token operator">+</span> <span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addressOf</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will print: The memory address is 31864981224 There are different compressed reference modes in the HotSpot JVM. Because of these modes, this value may not be completely accurate. Therefore, we shouldn&#39;t go and perform some native memory manipulations based on this address, as it may cause weird memory corruptions.</p><p>Also, memory addresses in most JVM implementations are subject to change as the GC moves the objects around from time to time.</p><h2 id="_4-identity-hash-code" tabindex="-1"><a class="header-anchor" href="#_4-identity-hash-code" aria-hidden="true">#</a> 4. Identity Hash Code</h2><p>There&#39;s a common misconception that the memory addresses of objects in the JVM are represented as part of their default toString implementations, such as java.lang.Object@60addb54. That is, many think that the “60addb54” is the memory address of that particular object.</p><p>Let&#39;s check this assumption:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Memory address: &quot;</span> <span class="token operator">+</span> <span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addressOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;toString: &quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hashCode: &quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hashCode: &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will print the following:</p><pre><code>Memory address: 31879960584
toString: java.lang.Object@60addb54
hashCode: 1622006612
hashCode: 1622006612
</code></pre><p>Quite interestingly, the &quot;60addb54&quot; is the hexadecimal version of the hash code, which is 1622006612. The hashCode() method is one of the common methods for all Java objects. When we don&#39;t declare a hashCode() method for a class, Java will use the identity hash code for it.</p><p>As shown above, the identity hash code (that part after @ in toString) and the memory address are different.</p>`,20))])}const g=o(l,[["render",m],["__file","java-object-memory-address.html.vue"]]);export{g as default};
