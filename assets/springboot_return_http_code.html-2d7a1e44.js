import{_ as o,D as c,V as i,W as l,a0 as e,Y as s,Z as a,$ as p}from"./framework-e0f7ab62.js";const u={},r={href:"https://clearlove443.github.io/v2/blogs/2021/springBoot_handle_global_exception.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://gitee.com/ClearLove443/spring-boot-demo/tree/master/spring-boot/207-web-response",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const t=c("ExternalLinkIcon");return i(),l("div",null,[n[6]||(n[6]=e(`<p>W 虽然 http 的提供了一整套完整、定义明确的状态码，但实际的业务支持中，后端并不总会遵守这套规则，更多的是在返回结果中，加一个 code 字段来自定义业务状态，即便是后端 5xx 了，返回给前端的 http code 依然是 200</p><p>那么如果我想遵守 http 的规范，不同的 case 返回不同的 http code 在 Spring 中可以做呢?</p><p>本文将介绍四种设置返回的 HTTP CODE 的方式</p><ul><li>@ResponseStatus 注解方式</li><li>ResponseEntity</li><li>HttpServletResponse#setStatus</li><li>HttpServletResponse#sendError</li></ul><h2 id="responsestatus-使用" tabindex="-1"><a class="header-anchor" href="#responsestatus-使用" aria-hidden="true">#</a> ResponseStatus 使用</h2><p>通过注解<code>@ResponseStatus</code>，来指定返回的 http code, 一般来说，使用它有两种姿势，一个是直接加在方法上，一个是加在异常类上</p><h3 id="装饰方法" tabindex="-1"><a class="header-anchor" href="#装饰方法" aria-hidden="true">#</a> 装饰方法</h3><p>直接在方法上添加注解，并制定对应的 code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注解方式，只支持标准http状态码
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;ano&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span> reason <span class="token operator">=</span> <span class="token string">&quot;请求参数异常!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">ano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;{\\&quot;code\\&quot;: 400, \\&quot;msg\\&quot;: \\&quot;bad request!\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测一下，返回结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/ano&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">400</span>
Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Transfer-Encoding: chunked
Date: Sun, 05 Jan <span class="token number">2020</span> 01:29:04 GMT
Connection: close

<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-01-05T01:29:04.673+0000&quot;</span>,<span class="token string">&quot;status&quot;</span>:400,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Bad Request&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;请求参数异常!&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/code/ano&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们发起请求时，返回的状态码为 400，返回的数据为 springboot 默认的错误信息格式</p><p>虽然上面这种使用姿势可以设置 http code，但是这种使用姿势有什么意义呢？</p>`,13)),s("p",null,[n[1]||(n[1]=a("如果看过 web 系列教程中的：",-1)),s("a",r,[n[0]||(n[0]=a("SpringBoot 系列教程 web 篇之全局异常处理",-1)),p(t)]),n[2]||(n[2]=a(" 可能就会有一些映象，配合",-1)),n[3]||(n[3]=s("code",null,"@ExceptionHandler",-1)),n[4]||(n[4]=a("来根据异常返回对应的状态码",-1))]),n[7]||(n[7]=e(`<p>一个推荐的使用姿势，下面表示当你的业务逻辑中出现数组越界时，返回 500 的状态码以及完整的堆栈信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleArrayIndexOutBounds</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
        <span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;array index out conf!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;aryIndexOutOfBounds: &quot;</span> <span class="token operator">+</span> <span class="token function">getThrowableStackInfo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰异常类" tabindex="-1"><a class="header-anchor" href="#装饰异常类" aria-hidden="true">#</a> 装饰异常类</h3><p>另外一种使用姿势就是直接装饰在异常类上，然后当你的业务代码中，抛出特定的异常类，返回的 httpcode 就会设置为注解中的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 异常类 + 注解方式，只支持标准http状态码
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;exception/500&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serverException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerException</span><span class="token punctuation">(</span><span class="token string">&quot;内部异常哦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;exception/400&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">clientException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;客户端异常哦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">,</span> reason <span class="token operator">=</span> <span class="token string">&quot;服务器失联了，请到月球上呼叫试试~~&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServerException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span> reason <span class="token operator">=</span> <span class="token string">&quot;老哥，你的请求有问题~~&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClientException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果如下，在异常类上添加注解的方式，优点在于不需要配合@ExceptionHandler 写额外的逻辑了；缺点则在于需要定义很多的自定义异常类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/exception/400&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">400</span>
Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Transfer-Encoding: chunked
Date: Sun, 05 Jan <span class="token number">2020</span> 01:37:07 GMT
Connection: close

<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-01-05T01:37:07.662+0000&quot;</span>,<span class="token string">&quot;status&quot;</span>:400,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Bad Request&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;老哥，你的请求有问题~~&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/code/exception/400&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/exception/500&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">500</span>
Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Transfer-Encoding: chunked
Date: Sun, 05 Jan <span class="token number">2020</span> 01:37:09 GMT
Connection: close

<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-01-05T01:37:09.389+0000&quot;</span>,<span class="token string">&quot;status&quot;</span>:500,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Internal Server Error&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;服务器失联了，请到月球上呼叫试试~~&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/code/exception/500&quot;</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>ResponseStatus 注解的使用姿势，只支持标准的 Http Code（必须是枚举类 org.springframework.http.HttpStatus）</p><h2 id="responseentity" tabindex="-1"><a class="header-anchor" href="#responseentity" aria-hidden="true">#</a> ResponseEntity</h2><p>这种使用姿势就比较简单了，方法的返回结果必须是 ResponseEntity，下面给出两个实际的 case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;401&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">_401</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;code\\&quot;: 401, \\&quot;msg\\&quot;: \\&quot;未授权!\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;451&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">_451</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">451</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;code\\&quot;: 451, \\&quot;msg\\&quot;: \\&quot;自定义异常!\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/401&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">401</span>
Content-Type: text/plain<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Content-Length: <span class="token number">34</span>
Date: Sun, 05 Jan <span class="token number">2020</span> 01:40:10 GMT

<span class="token punctuation">{</span><span class="token string">&quot;code&quot;</span><span class="token builtin class-name">:</span> <span class="token number">401</span>, <span class="token string">&quot;msg&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;未授权!&quot;</span><span class="token punctuation">}</span>

<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/451&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">451</span>
Content-Type: text/plain<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Content-Length: <span class="token number">40</span>
Date: Sun, 05 Jan <span class="token number">2020</span> 01:40:19 GMT

<span class="token punctuation">{</span><span class="token string">&quot;code&quot;</span><span class="token builtin class-name">:</span> <span class="token number">451</span>, <span class="token string">&quot;msg&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;自定义异常!&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的使用实例上看，可以知道这种使用方式，不仅仅支持标准的 http code，也支持自定义的 code（如返回 code 451)</p><h2 id="httpservletresponse" tabindex="-1"><a class="header-anchor" href="#httpservletresponse" aria-hidden="true">#</a> HttpServletResponse</h2><p>这种使用姿势则是直接操作<code>HttpServletResponse</code>对象，手动录入返回的结果</p><h3 id="setstatus" tabindex="-1"><a class="header-anchor" href="#setstatus" aria-hidden="true">#</a> setStatus</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * response.setStatus 支持自定义http code，并可以返回结果
 *
 * <span class="token keyword">@param</span> <span class="token parameter">response</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;525&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">_525</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;{\\&quot;code\\&quot;: 525, \\&quot;msg\\&quot;: \\&quot;自定义错误码 525!\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/525&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">525</span>
Content-Type: text/plain<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Content-Length: <span class="token number">47</span>
Date: Sun, 05 Jan <span class="token number">2020</span> 01:45:38 GMT

<span class="token punctuation">{</span><span class="token string">&quot;code&quot;</span><span class="token builtin class-name">:</span> <span class="token number">525</span>, <span class="token string">&quot;msg&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;自定义错误码 525!&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式比较简单，直接设置 status 即可，支持自定义的 Http Code 返回</p><h3 id="senderror" tabindex="-1"><a class="header-anchor" href="#senderror" aria-hidden="true">#</a> sendError</h3><p>使用这种姿势的时候需要注意一下，只支持标准的 http code，而且 response body 中不会有你的业务返回数据，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * send error 方式，只支持标准http状态码; 且不会带上返回的结果
 *
 * <span class="token keyword">@param</span> <span class="token parameter">response</span>
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;410&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">_410</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">410</span><span class="token punctuation">,</span> <span class="token string">&quot;send 410&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;{\\&quot;code\\&quot;: 410, \\&quot;msg\\&quot;: \\&quot;Gone 410!\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;460&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">_460</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">,</span> <span class="token string">&quot;send 460&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;{\\&quot;code\\&quot;: 460, \\&quot;msg\\&quot;: \\&quot;Gone 460!\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/410&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">410</span>
Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Transfer-Encoding: chunked
Date: Sun, 05 Jan <span class="token number">2020</span> 01:47:52 GMT

<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-01-05T01:47:52.300+0000&quot;</span>,<span class="token string">&quot;status&quot;</span>:410,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Gone&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;send 410&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/code/410&quot;</span><span class="token punctuation">}</span>

<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/code/460&#39;</span> <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">500</span>
Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Transfer-Encoding: chunked
Date: Sun, 05 Jan <span class="token number">2020</span> 01:47:54 GMT
Connection: close

<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-01-05T01:47:54.719+0000&quot;</span>,<span class="token string">&quot;status&quot;</span>:460,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Http Status 460&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;send 460&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/code/460&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的 case 也可以看出，当我们使用 send error 时，如果是标准的 http code，会设置对响应头；如果是自定义的不被识别的 code，那么返回的 http code 是 500</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>上面介绍了几种常见的设置响应 http code 的姿势，下面小结一下使用时的注意事项</p><h3 id="responsestatus" tabindex="-1"><a class="header-anchor" href="#responsestatus" aria-hidden="true">#</a> ResponseStatus</h3><ul><li>只支持标准的 http code</li><li>装饰自定义异常类，使用时抛出对应的异常类，从而达到设置响应 code 的效果</li><li>缺点对非可控的异常类不可用</li><li>结合@ExceptionHandler，用来装饰方法</li></ul><h3 id="responseentity-1" tabindex="-1"><a class="header-anchor" href="#responseentity-1" aria-hidden="true">#</a> ResponseEntity</h3><p>形如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">451</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;code\\&quot;: 451, \\&quot;msg\\&quot;: \\&quot;自定义异常!\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>感觉是最强大的使用姿势，就是写起来没有那么简洁</li><li>支持自定义 code，支持设置 response body</li></ul><h3 id="httpservletresponse-1" tabindex="-1"><a class="header-anchor" href="#httpservletresponse-1" aria-hidden="true">#</a> HttpServletResponse</h3><ul><li>setStatus: 设置响应 code，支持自定义 code，支持返回 response body</li><li>sendError: 只支持标准的 http code，如果传入自定义的 code，返回的 http code 会是 500</li></ul><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码" aria-hidden="true">#</a> 项目源码</h2>`,39)),s("p",null,[s("a",d,[n[5]||(n[5]=a("项目:",-1)),p(t)])])])}const b=o(u,[["render",k],["__file","springboot_return_http_code.html.vue"]]);export{b as default};
