import{_ as i,V as t,W as e,a0 as a}from"./framework-7c77a285.js";const d={};function r(n,l){return t(),e("div",null,l[0]||(l[0]=[a(`<pre><code>文章总结了什么是块级元素、行内元素；有哪些块级元素、行内元素；块级元素与行内元素间的相互转换；行内置换元素的特殊性。
</code></pre><h1 id="什么是块级元素、行内元素" tabindex="-1"><a class="header-anchor" href="#什么是块级元素、行内元素" aria-hidden="true">#</a> 什么是块级元素、行内元素</h1><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">是否独占一行</th><th style="text-align:left;">width、height</th><th style="text-align:left;">padding、margin</th><th style="text-align:left;">默认宽高</th></tr></thead><tbody><tr><td style="text-align:left;">块级元素</td><td style="text-align:left;">是</td><td style="text-align:left;">有效</td><td style="text-align:left;">有效</td><td style="text-align:left;">撑满父元素</td></tr><tr><td style="text-align:left;">行内元素</td><td style="text-align:left;">否</td><td style="text-align:left;">无效</td><td style="text-align:left;">padding 有效；margin 水平方向有效，竖直方向无效</td><td style="text-align:left;">随内部元素的内容变化</td></tr><tr><td style="text-align:left;">行内块级元素</td><td style="text-align:left;">否</td><td style="text-align:left;">有效</td><td style="text-align:left;">有效</td><td style="text-align:left;">随内部元素的内容变化</td></tr></tbody></table><h2 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素" aria-hidden="true">#</a> 块级元素：</h2><pre><code>独占一行；元素的宽高、以及内外边距都可设置；元素宽度在不设置的情况下，是它本身父容器的100%
</code></pre><h2 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素" aria-hidden="true">#</a> 行内元素：</h2><pre><code>不会自动进行换行；元素的宽高不可设置；内边距可以设置、外边距水平方向有效，竖直方向无效；元素宽度在不设置的情况下，随内部元素的内容变化。
</code></pre><h1 id="有哪些块级元素、行内元素" tabindex="-1"><a class="header-anchor" href="#有哪些块级元素、行内元素" aria-hidden="true">#</a> 有哪些块级元素、行内元素</h1><h2 id="常见块级元素" tabindex="-1"><a class="header-anchor" href="#常见块级元素" aria-hidden="true">#</a> 常见块级元素：</h2><pre><code>div , h1---h6 , p , ul , ol , dl , table , form
</code></pre><ul><li>div - 常用块级元素，也是 css layout 的主要标签</li><li>h1---h6 标题</li><li>p - 段落</li><li>ul - 非排序列表</li><li>ol - 排序表单</li><li>dl - 定义列表</li><li>table - 表格</li><li>form - 交互表单</li><li>hr - 水平分隔线</li><li>pre - 格式化文本</li><li>address - 地址</li><li>blockquote - 块引用</li><li>header - HTML5 区段头或页头。</li><li>footer - HTML5 区段尾或页尾。</li><li>section - HTML5 一个页面区段。</li><li>article - HTML5 文章内容。</li><li>aside - HTML5 伴随内容。</li><li>hgroup - HTML5 标题组。</li><li>menu - HTML5 菜单列表</li><li>figcaption - HTML5 图文信息组标题</li><li>figure - HTML5 图文信息组</li><li>audio - HTML5 音频播放</li><li>video - HTML5 视频</li><li>output - HTML5 表单输出</li></ul><h2 id="常见行内元素" tabindex="-1"><a class="header-anchor" href="#常见行内元素" aria-hidden="true">#</a> 常见行内元素：</h2><pre><code>span , a  ,strong  ,b ,em  , i  , big  ,small  ,label
img , input  , select ,textarea（属于行内置换元素，下文详解）
</code></pre><ul><li>span - 常用内联容器，定义文本内区块</li><li>a - 锚点</li><li>strong - 粗体强调</li><li>b - 粗体</li><li>em - 强调</li><li>i - 斜体</li><li>small - 小字体文本</li><li>big - 大字体</li><li>sub - 下标</li><li>sup - 上标</li><li>label - 表格标签</li><li>img - 图片* input - 输入框</li><li>select - 项目选择</li><li>textarea - 多行文本输入框</li><li>abbr - 缩写</li><li>code - 计算机代码(在引用源码的时候需要)</li><li>acronym - 首字</li><li>bdo - bidi override</li><li>br - 换行</li><li>cite - 引用</li><li>dfn - 定义字段</li><li>font - 字体设定(不推荐)</li><li>kbd - 定义键盘文本</li><li>q - 短引用</li><li>s - 中划线(不推荐)</li><li>samp - 定义范例计算机代码</li><li>strike - 中划线</li><li>tt - 电传文本</li><li>u - 下划线</li><li>var - 定义变量</li></ul><h1 id="行内元素与块级元素间的相互转换" tabindex="-1"><a class="header-anchor" href="#行内元素与块级元素间的相互转换" aria-hidden="true">#</a> 行内元素与块级元素间的相互转换</h1><pre><code>行内元素和块级元素都不是绝对的，可以相互转换,，通常有这些方式可以转换。
</code></pre><ol><li>display，将元素设置为块级、行内或是其它。</li><li>float，隐形地把内联元素转换为行内块级元素。不会占据一行，相当于 display：inline-block;</li><li>position,属性值为 absolute、fixed 时,隐形地把内联元素转换为块级元素，其它属性值不会做转换。</li></ol><h1 id="置换元素" tabindex="-1"><a class="header-anchor" href="#置换元素" aria-hidden="true">#</a> 置换元素</h1><p><code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>是行内元素，但是它们却可以设置宽高，这是为什么呢？因为它们是行内置换元素。 置换元素：内容不受 CSS 视觉格式化模型控制，CSS 渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。浏览器根据元素的标签和属性，来决定元素的具体显示内容。 例如：浏览器会根据<code>&lt;img&gt;</code>标签的 src 属性的值来读取图片信息并显示出来，而如果查看 html 代码，则看不到图片的实际内容；<code>&lt;input&gt;</code>标签的 type 属性来决定是显示输入框，还是单选按钮等。 置换元素在其显示中生成了框，这也就是有的内联元素能够设置宽高的原因。</p>`,19)]))}const h=i(d,[["render",r],["__file","css-ji-chu-kuai-ji-yuan-su-yu-xing-nei-yuan-su.html.vue"]]);export{h as default};
