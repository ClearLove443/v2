import{_ as a,V as s,W as n,a0 as r}from"./framework-e0f7ab62.js";const i={};function d(l,e){return s(),n("div",null,[...e[0]||(e[0]=[r(`<p>查看子系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">-l</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker-desktop 是存放程序的，docker-desktop-data 是存放镜像的，这两个 wsl 子系统都是默认放在系统盘的。 删除所有的 image/container/wsl/hyperv 数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Troubleshoot =&gt; Clean / Purge data =&gt; hyperv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导出 wsl 子系统镜像:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--export</span> docker-desktop docker-desktop.tar
wsl <span class="token parameter variable">--export</span> docker-desktop-data docker-desktop-data.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除子系统镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--unregister</span> docker-desktop
wsl <span class="token parameter variable">--unregister</span> docker-desktop-data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重新创建 wsl 子系统：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--import</span> docker-desktop D:<span class="token punctuation">\\</span>docker<span class="token punctuation">\\</span>wsl<span class="token punctuation">\\</span>distro docker-desktop.tar <span class="token parameter variable">--version</span> <span class="token number">2</span>
wsl <span class="token parameter variable">--import</span> docker-desktop-data D:<span class="token punctuation">\\</span>docker<span class="token punctuation">\\</span>wsl<span class="token punctuation">\\</span>data docker-desktop-data.tar <span class="token parameter variable">--version</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看当前 Windows 10 PC 中已安装的 Linux 发行版</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wslconfig /setdefault Name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置默认 Linux 发行版</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wslconfig /setdefault docker-desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行多个 Linux 发行版</p><p>在 Windows 10 中安装好多套 Linux 发行版之后，即便没将它设置为默认的 Linux 环境，也可以启动使用。例如，用户可以直接在「开始」菜单中找到启动 Ubuntu、openSUSE Leap 和 SUSE Linux Enterprise Server 系统的快捷方式，并同时运行三套独立的环境。</p><p>如果你没在 Microsoft Store 中选择将 Linux 发行版的快捷方式固定到「开始」菜单，也只需要使用其命令名称即可从命令行或快捷方式启动 Linux 发行版。以下启动三个 Linux 发行版所需的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>　　Ubuntu： ubuntu

　　openSUSE Leap <span class="token number">42</span>： opensuse-42

　　SUSE Linux Enterprise Server <span class="token number">12</span>： sles-12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，即使 Ubuntu 是你的默认环境，仍然可以通过运行 opensuse-42 命令从任何地方启动 openSUSE。</p>`,19)])])}const p=a(i,[["render",d],["__file","xMrzJo_w.html.vue"]]);export{p as default};
