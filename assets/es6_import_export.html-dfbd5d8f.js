import{_ as s,V as a,W as t,a0 as p}from"./framework-e0f7ab62.js";const e={};function o(c,n){return a(),t("div",null,[...n[0]||(n[0]=[p(`<p>ES6 中 export 和 import 一般的用法有两种</p><ol><li>命名导出（Named exports）</li><li>默认导出（Default exports）</li></ol><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><ul><li>如果是 js 项目，则需要在 package.json 添加 <code>&quot;type&quot;: &quot;module&quot;,</code>ts 的话就不需要。</li><li>如果是 js 项目，引入的时候需要添加文件后缀<code>.js</code> , ts 的话就不需要。</li></ul><h2 id="命名导出-named-exports" tabindex="-1"><a class="header-anchor" href="#命名导出-named-exports" aria-hidden="true">#</a> 命名导出（Named exports）</h2><p>就是每一个需要导出的数据类型都要有一个 name，统一引入一定要带有{}，即便只有一个需要导出的数据类型。这种写法清爽直观，是推荐的写法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//------ lib.js ------</span>
<span class="token keyword">const</span> sqrt <span class="token operator">=</span> Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">diag</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">square</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> sqrt<span class="token punctuation">,</span> square<span class="token punctuation">,</span> diag <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//------ main.js ------</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> square<span class="token punctuation">,</span> diag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lib.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 121</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">diag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把 export 直接加到声明前面就可以省略{}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//------ lib.js ------</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> sqrt <span class="token operator">=</span> Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">diag</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">square</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//------ main.js ------</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> square<span class="token punctuation">,</span> diag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lib.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 121</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">diag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论怎样导出，引入的时候都需要{}。</p><h2 id="别名引入-aliasing-named-imports" tabindex="-1"><a class="header-anchor" href="#别名引入-aliasing-named-imports" aria-hidden="true">#</a> 别名引入（Aliasing named imports）</h2><p>当从不同模块引入的变量名相同的时候</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> speak <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./cow.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> speak <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./goat.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些写法显然会造成混乱 正确的方法是这样的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> speak <span class="token keyword">as</span> cowSpeak <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./cow.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> speak <span class="token keyword">as</span> goatSpeak <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./goat.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可是，当从每个模块需要引入的方法很多的时候，这种写法就显得十分的繁琐、冗长，例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> speak <span class="token keyword">as</span> cowSpeak<span class="token punctuation">,</span> eat <span class="token keyword">as</span> cowEat<span class="token punctuation">,</span> drink <span class="token keyword">as</span> cowDrink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./cow.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  speak <span class="token keyword">as</span> goatSpeak<span class="token punctuation">,</span>
  eat <span class="token keyword">as</span> goatEat<span class="token punctuation">,</span>
  drink <span class="token keyword">as</span> goatDrink<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./goat.js&quot;</span><span class="token punctuation">;</span>

<span class="token function">cowSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
<span class="token function">cowEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cow eats</span>
<span class="token function">goatSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baa</span>
<span class="token function">goatDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// goat drinks</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案就是命名空间引入了</p><h2 id="命名空间引入-namespace-imports" tabindex="-1"><a class="header-anchor" href="#命名空间引入-namespace-imports" aria-hidden="true">#</a> 命名空间引入（Namespace imports）</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> cow <span class="token keyword">from</span> <span class="token string">&quot;./cow.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> goat <span class="token keyword">from</span> <span class="token string">&quot;./goat.js&quot;</span><span class="token punctuation">;</span>

cow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
goat<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>十分的简洁优雅</p><h2 id="默认导出-default-exports" tabindex="-1"><a class="header-anchor" href="#默认导出-default-exports" aria-hidden="true">#</a> 默认导出（Default exports）</h2><p>默认导出就不需要 name 了，但是一个 js 文件中只能有一个 export default。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//------ myFunc.js ------</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//------ main1.js ------</span>
<span class="token keyword">import</span> myFunc <span class="token keyword">from</span> <span class="token string">&#39;myFunc&#39;</span><span class="token punctuation">;</span>
<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这种导出方式可以看成是命名导出的变种，只不过把命名写成了 default。 虽然 export default 只能有一个，但也可以导出多个方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;moo&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;cow eats&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;cow drinks&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入与命名空间引入类似</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> cow <span class="token keyword">from</span> <span class="token string">&quot;./default-cow.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> goat <span class="token keyword">from</span> <span class="token string">&quot;./default-goat.js&quot;</span><span class="token punctuation">;</span>

cow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
goat<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在编写模块的时候使用的导出方法不统一，那么引入的时候就需要考虑不同模块引入的方式。这种麻烦可以通过自引用的方法消除。方法如下</p><h2 id="编写两种引入方式通用的模块" tabindex="-1"><a class="header-anchor" href="#编写两种引入方式通用的模块" aria-hidden="true">#</a> 编写两种引入方式通用的模块</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myself <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow.js&quot;</span><span class="token punctuation">;</span> <span class="token comment">// import this file into itself</span>

<span class="token comment">// this module&#39;s own namespace is its default export</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> myself<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;moo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在引入的时候就不需要考虑引入方式了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> cow <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> alsocow <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow&quot;</span><span class="token punctuation">;</span>

cow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
alsocow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种引入方法均可。 这种方法也有一个小缺点，就是在我们编写的模块中，有一个 function 是常用的，我们想默认导出，可 export default 已经使用了，而我们知道 export default 在一个模块中只能使用一次。这时就要使用 Object.assign</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myself <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>speak<span class="token punctuation">,</span> myself<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;moo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，Object.assign 只能用于 function。</p><p>对应引入的例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> cow <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> alsocow <span class="token keyword">from</span> <span class="token string">&quot;./ambidextrous-cow&quot;</span><span class="token punctuation">;</span>

<span class="token function">cow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
cow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
alsocow<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// moo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)])])}const l=s(e,[["render",o],["__file","es6_import_export.html.vue"]]);export{l as default};
