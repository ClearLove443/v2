import{_ as i,D as l,V as r,W as c,a0 as t,Y as e,Z as s,$ as o}from"./framework-e0f7ab62.js";const p={},d={href:"https://docs.docker.com/engine/install/ubuntu/",target:"_blank",rel:"noopener noreferrer"},u={start:"2"},k={href:"https://docs.docker.com/engine/install/linux-postinstall/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/kubernetes-sigs/kind/releases",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/felipecrs/dotfiles#install-the-dotfiles-manually",target:"_blank",rel:"noopener noreferrer"};function b(h,n){const a=l("ExternalLinkIcon");return r(),c("div",null,[n[12]||(n[12]=t('<p>So, now that Docker Desktop is paid under certain scenarios, you may want to switch to something else. This is a straight to the point guide on how to make Docker CE run fully on WSL2.</p><h2 id="what-you-will-get" tabindex="-1"><a class="header-anchor" href="#what-you-will-get" aria-hidden="true">#</a> What you will get</h2><p>A full-fledged Docker installation on WSL2 Docker Daemon automatic start without any crazy hacks</p><h2 id="what-you-will-not-get" tabindex="-1"><a class="header-anchor" href="#what-you-will-not-get" aria-hidden="true">#</a> What you will not get</h2><p>Docker Daemon sharing between Windows and WSL (i.e. you cannot run docker from Windows PowerShell) Docker Daemon sharing between WSL distributions</p><h2 id="requisites" tabindex="-1"><a class="header-anchor" href="#requisites" aria-hidden="true">#</a> Requisites</h2><p>I will consider that you already have WSL2 working, and you are using Ubuntu as your distribution.</p><h2 id="guide" tabindex="-1"><a class="header-anchor" href="#guide" aria-hidden="true">#</a> Guide</h2>',8)),e("ol",null,[e("li",null,[n[1]||(n[1]=s("Install Docker CE on Ubuntu by following the ",-1)),e("a",d,[n[0]||(n[0]=s("official guide",-1)),o(a)]),n[2]||(n[2]=s(":",-1))])]),n[13]||(n[13]=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Ensures not older packages are installed</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc

<span class="token comment"># Ensure pre-requisites are installed</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\\</span>
  apt-transport-https <span class="token punctuation">\\</span>
  ca-certificates <span class="token punctuation">\\</span>
  <span class="token function">curl</span> <span class="token punctuation">\\</span>
  gnupg <span class="token punctuation">\\</span>
  lsb-release

<span class="token comment"># Adds docker apt repository</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable&quot;</span> <span class="token operator">|</span>
    <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null

<span class="token comment"># Adds docker apt key</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span>
    <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg

<span class="token comment"># Refreshes apt repos</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token comment"># Installs Docker CE</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("ol",u,[e("li",null,[n[4]||(n[4]=s("Perform the ",-1)),e("a",k,[n[3]||(n[3]=s("post-installation steps",-1)),o(a)]),n[5]||(n[5]=s(":",-1))])]),n[14]||(n[14]=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Ensures docker group exists</span>
<span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>

<span class="token comment"># Ensures you are part of it</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>

<span class="token comment"># Now, close your shell and open another for taking the group changes into account</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Make Docker Daemon start on WSL initialization: If you are enrolled in Windows Insiders, you can use a brand-new feature of WSL to start the Docker Daemon during the initialization. You only need to add:</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">[</span>boot<span class="token punctuation">]</span>
command = &quot;service docker start&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To your <code>/etc/wsl.conf</code> within your WSL distribution. Then, restart it with <code>wsl.exe --shutdown</code>. To verify that it works, you can run <code>docker version</code>. If you do not receive any permission denied error, you are good.</p><p>But if you are not enrolled in Windows Insiders, you can achieve a similar result with the following approach: Open the ~/.profile (or ~/.zprofile if you are using ZSH rather than Bash) in your WSL distribution, and add a section like so to it:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token function">service</span> <span class="token function">docker</span> status <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">&quot;is not running&quot;</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    wsl.exe <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">\${WSL_DISTRO_NAME}</span>&quot;</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-e</span> /usr/sbin/service <span class="token function">docker</span> start <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This piece of code will run every time you open a new shell on your WSL distribution. It checks whether the Docker Daemon is running, and if not, starts it without prompting for credentials. Without any noticeable delay.</p><p>To verify, after making the changes, open a new shell and run the docker version command. If you do not receive any permission denied error, you are good.</p><p>If you are unsure about which method to choose, you can choose both. It&#39;s harmless, I do it on mine.</p><h2 id="bonus" tabindex="-1"><a class="header-anchor" href="#bonus" aria-hidden="true">#</a> Bonus</h2><ol><li>Installing Docker Compose (v2+):</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Finds the latest version</span>
<span class="token assign-left variable">compose_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-w</span> <span class="token string">&quot;%{url_effective}&quot;</span> https://github.com/docker/compose/releases/latest <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">basename</span><span class="token variable">)</span></span>

<span class="token comment"># Downloads the binary to the plugins folder</span>
<span class="token function">curl</span> <span class="token parameter variable">-fL</span> --create-dirs <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose <span class="token punctuation">\\</span>
    <span class="token string">&quot;https://github.com/docker/compose/releases/download/<span class="token variable">\${compose_version}</span>/docker-compose-linux-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span>

<span class="token comment"># Assigns execution permission to it</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To verify it works you can run <code>docker compose version</code>.</p><ol start="2"><li>Installing Docker Compose Switch (to use the docker-compose command):</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Finds the latest version</span>
<span class="token assign-left variable">switch_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-w</span> <span class="token string">&quot;%{url_effective}&quot;</span> https://github.com/docker/compose-switch/releases/latest <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">basename</span><span class="token variable">)</span></span>

<span class="token comment"># Downloads the binary</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fL</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose <span class="token punctuation">\\</span>
    <span class="token string">&quot;https://github.com/docker/compose-switch/releases/download/<span class="token variable">\${switch_version}</span>/docker-compose-linux-<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span>&quot;</span>

<span class="token comment"># Assigns execution permission to it</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS: I suggest to install the <code>docker-compose</code> to <code>/usr/local/bin/</code> because otherwise, the VS Code - Remote Containers extension will not find it.</p><p>To verify it works, you can run <code>docker-compose version</code>.</p><ol start="3"><li>Install the Docker Credential Helper:</li></ol><p>You will need this if you want Docker to store your credentials securely when you perform docker login. Thanks to the WSL interoperability between Windows, you can install the Windows version of the Docker Credential Helper inside of WSL itself.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Finds the latest version</span>
<span class="token assign-left variable">wincred_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-w</span> <span class="token string">&quot;%{url_effective}&quot;</span> https://github.com/docker/docker-credential-helpers/releases/latest <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">basename</span><span class="token variable">)</span></span>

<span class="token comment"># Downloads and extracts the .exe</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fL</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;https://github.com/docker/docker-credential-helpers/releases/download/<span class="token variable">\${wincred_version}</span>/docker-credential-wincred-<span class="token variable">\${wincred_version}</span>-<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span>.zip&quot;</span> <span class="token operator">|</span>
    zcat <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /usr/local/bin/docker-credential-wincred.exe <span class="token operator">&gt;</span>/dev/null

<span class="token comment"># Assigns execution permission to it</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-credential-wincred.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, configure your Docker CLI to use it by assuring that the following is present in your <code>~/.docker/config.json</code>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;credsStore&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wincred.exe&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To verify that it works, you can try to <code>docker login</code> and if not, Docker will complain about storing credentials in plain text</p><ol start="4"><li>Enabling Docker BuildKit:</li></ol><p>As it came enabled by Docker Desktop before. It&#39;s simple, ensure that the following is present in your <code>/etc/docker/daemon.json</code>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;features&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;buildkit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will need to edit this file as root, so make sure to use <code>sudo</code> before running your editor (<code>sudo vim /etc/docker/daemon.json</code>).</p><h2 id="final-considerations" tabindex="-1"><a class="header-anchor" href="#final-considerations" aria-hidden="true">#</a> Final considerations</h2>`,28)),e("p",null,[n[7]||(n[7]=s("The entire setup process may take some time, but you will have achieved almost everything that Docker Desktop used to provide to you (by the way, I use ",-1)),e("a",v,[n[6]||(n[6]=s("kind",-1)),o(a)]),n[8]||(n[8]=s(" as an alternative to Docker Desktop's built-in K8s).",-1))]),n[15]||(n[15]=e("p",null,"However, you can achieve a similar (and even higher/better) level of easiness that Docker Desktop provided to you by wrapping all the steps above in your dotfiles installation steps.",-1)),e("p",null,[n[10]||(n[10]=s("For example, in this ",-1)),e("a",m,[n[9]||(n[9]=s("dotfiles",-1)),o(a)]),n[11]||(n[11]=s(", every single of these steps are automated, including configuring /etc/docker/daemon.json, changing ~/.profile, and even providing a way to automatically update your extra binaries (docker-compose, or the wincred.exe) every time you update your dotfiles (by using a feature of chezmoi - a dotfiles manager which I totally recommend).",-1))])])}const f=i(p,[["render",b],["__file","run-docker-on-wsl2.html.vue"]]);export{f as default};
