import{_ as s,V as a,W as e,a0 as t}from"./framework-e0f7ab62.js";const l={};function i(p,n){return a(),e("div",null,[...n[0]||(n[0]=[t(`<p>Learn about NULL value and an empty string behavior in oracle database with example queries.</p><ul><li>NULL means no-value(nothing).</li><li>An empty string(”) treated as NULL value</li></ul><p>Let’s create a table suppliers_tbl with the following table definition.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> suppliers_tbl
<span class="token punctuation">(</span> supplier_id number<span class="token punctuation">,</span>
  supplier_name varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we’ll insert following records into this table.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> suppliers_tbl <span class="token punctuation">(</span>supplier_id<span class="token punctuation">,</span> supplier_name <span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- insertion statement 1</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> suppliers_tbl <span class="token punctuation">(</span>supplier_id<span class="token punctuation">,</span> supplier_name <span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- insertion statement 2</span>


<span class="token keyword">insert</span> <span class="token keyword">into</span> suppliers_tbl <span class="token punctuation">(</span>supplier_id<span class="token punctuation">,</span> supplier_name <span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- insertion statement 3</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> suppliers_tbl <span class="token punctuation">(</span>supplier_id<span class="token punctuation">,</span> supplier_name <span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- insertion statement 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first statement inserts a record with a supplier_name that is null, while the second statement inserts a record with an empty string as a supplier_name.</p><p>The third statement inserts a record with a supplier_id that is null, while the fourth statement inserts a record with an empty string as a supplier_id.</p><p>with the above four statements we can observe that NULL has no bounds. It can be used for string, integer, date, etc. fields in a database.</p><p>It is better to use NULL , not an empty string if you have no value for a field.</p><p>The basic difference between empty string and NULL value is , empty string is allocated to a memory and NULL value is not allocated any memory.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> suppliers_tbl
<span class="token keyword">WHERE</span> supplier_id<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> suppliers_tbl
<span class="token keyword">where</span> supplier_name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run above statements, you’d expect to retrieve the row that you inserted above. But instead, this statement will not retrieve any records at all.</p><p>Now, try retrieving all records where the supplier_name contains a null value:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> suppliers_tbl
<span class="token keyword">WHERE</span> supplier_name <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>


<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> suppliers_tbl
<span class="token keyword">WHERE</span> supplier_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run above statements, you will retrieve all the rows that contain NULL and empty string values.</p><p>Notes:</p><ul><li>NULL value is unique. We cannot use the usual operators like &lt;,&lt;=,&gt;,&gt;=,==,!= etc operators.</li><li>We can use only IS NULL and IS NOT NULL condition to compare the NULL values.</li></ul><h2 id="point-to-remember" tabindex="-1"><a class="header-anchor" href="#point-to-remember" aria-hidden="true">#</a> Point to Remember:</h2><ul><li><p>Oracle internally changes empty string to NULL values. Oracle simply won&#39;t let insert an empty string.On the other hand, SQL Server would let you do what you are trying to achieve.</p></li><li><p>Null has no bounds, it can be used for string, integer, date, etc. fields in a database. Empty string is just regarding a string; it’s a string like ‘asdfasdf’ is, but is just has no length. If you have no value for a field, use null, not an empty string.</p></li><li><p>A NULL value represents the absence of a value for a record in a field (others software’s call it also a missing value).</p></li><li><p>An empty value is a “field-formatted” value with no significant data in it.</p></li><li><p>NULL isn’t allocated any memory, the string with NULL value is just a pointer which is pointing to nowhere in memory. however, Empty IS allocated to a memory location, although the value stored in the memory is “”.</p></li><li><p>Null is the database’s determination of an absense of a value logically, so to speak. You can query like: where FIELD_NAME is NULL</p></li></ul>`,20)])])}const r=s(l,[["render",i],["__file","oracle-null-vs-empty-string.html.vue"]]);export{r as default};
