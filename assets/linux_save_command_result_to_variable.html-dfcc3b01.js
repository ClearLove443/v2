import{_ as s,V as e,W as n,a0 as l}from"./framework-e0f7ab62.js";const r={};function i(t,a){return e(),n("div",null,[...a[0]||(a[0]=[l('<h2 id="两种实现语法" tabindex="-1"><a class="header-anchor" href="#两种实现语法" aria-hidden="true">#</a> 两种实现语法</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>命令<span class="token variable">)</span></span>\n<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>命令<span class="token variable">`</span></span> <span class="token comment"># 注意此处不是普通的单引号</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><ol><li>这两种语法均可实现将命令执行结果保存到 var 变量中，但是特殊情况下两种方式无法得到正确结果</li><li>如果命令执行过程中发生错误，则输出的错误信息不会保存到 var 变量中</li></ol>',4)])])}const c=s(r,[["render",i],["__file","linux_save_command_result_to_variable.html.vue"]]);export{c as default};
