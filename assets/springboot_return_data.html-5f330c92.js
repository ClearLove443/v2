import{_ as s,V as a,W as t,a0 as p}from"./framework-7c77a285.js";const e={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<p>前面几篇博文介绍了如何获取 get/post 传参，既然是 http 请求，一般也都是有来有往，有请求参数传递，就会有数据返回。那么我们通过 springboot 搭建的 web 应用，可以怎样返回数据呢？</p><p>本篇将主要介绍以下几种数据格式的返回实例</p><ul><li>返回文本</li><li>返回数组</li><li>返回 json 串</li><li>返回静态网页</li><li>返回图片</li></ul><h2 id="数据返回姿势实例" tabindex="-1"><a class="header-anchor" href="#数据返回姿势实例" aria-hidden="true">#</a> 数据返回姿势实例</h2><p>以下返回实例都放在同一个 Controller 中，具体定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataRespRest</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>文本返回 这个属于基础功能了，发起请求，返回一串文本，在 SpringMVC 的体系中，要实现这种通常的写法通常是直接定义方法的返回为 String；当然还有另外一种非常基础的写法，直接将返回的数据通过 HttpServletResponse 写入到输出流中</li></ol><p>下面给出这两种写法的实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strRsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strRsp2</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现中，方法上面多了一个注解<code>@ResponseBody</code>，这个表示返回数据，而不是视图（后面会详细说明）</p><p>strRsp2 的输出借助了 FastJson 来实现将 map 序列化为 json 串，然后写入输出流</p><p>从上面的输出也可以看出，第一种返回方式，ResponseHeaders 的 Content-Type: text/html;charset=UTF-8；而第二种方式则没有这个响应头，需要我们自己主动设置（这里注意一下即可，在后面的返回图片中有实例）</p><ol start="2"><li>返回数组 前面请求参数的博文中，我们看到请求参数允许传入数组，那么我们返回可以直接返回数组么？讲道理的话，应该没啥问题</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回数组
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;ary&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">aryRsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下响应头，为<code>application/json</code>, 也就是说 SpringMVC 将数组当成 json 串进行返回了</p><ol start="3"><li>Bean 返回 在我们实际的业务开发中，这种应该属于非常常见的使用姿势了，直接返回一个 POJO，调用者接收的是一个 json 串，可以很容易的反序列化为需要的对象</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回POJO
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;bean&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DemoRsp</span> <span class="token function">beanRsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DemoRsp</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;---&gt;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>网页返回 前面都是直接返回数据，但是我们平常在使用浏览器，更多的是发起一个请求，然后返回一个网页啊，难道说 springmvc 不能直接返回网页么？</li></ol><p>当然返回网页怎么可能会不支持，（题外话：个人感觉在前后端分离逐渐流行之后，直接由后端返回网页的 case 不太多了，前端和后端作为独立的项目部署，两者之间通过 json 串进行交流；这里扯远了），我们下面看一下 SpringMVC 中如何返回网页</p><p>我们可以从上面直接返回字符串的 case 中，得到一个思路，如果我直接返回一个 html 文本，会怎样？既然返回 content-type 是 text/html，那浏览器应该可以解析为网页的，下面实测一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHtmlRsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&lt;html&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;head&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;    &lt;title&gt;返回数据测试&lt;/title&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/head&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;body&gt;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;&lt;h1&gt;欢迎欢迎，热烈欢迎&lt;/h1&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/body&gt;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/html&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器发起请求之后，将我们返回的 html 文本当做网页正常渲染了，所以我们如果想返回网页，就这么干，没毛病！ 上面这种方式虽然说可以返回网页，然而在实际业务中，如果真要我们这么干，想想也是可怕，还干什么后端，分分钟全栈得了！！！ 下面看一下更常规的写法，首先我们需要配置下返回视图的前缀、后缀, 在 application.yml 配置文件中添加如下配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">view</span><span class="token punctuation">:</span>
      <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /
      <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们的静态网页，放在资源文件的 static 目录下，下面是我们实际的项目截图，index.html 为我们需要返回的静态网页</p><p>接下来就是我们的服务接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回视图
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;view&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">viewRsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下上面的接口，没有@ResponseBody 注解，表示这个接口返回的是一个视图，会从 static 目录下寻找名为 index.html（前缀路径和后缀是上面的 application.yml 中定义）的网页返回</p><ol start="5"><li>图片返回 图片返回与前面的又不太一样了，上面介绍的几种 case 中，要么是返回文本，要么返回视图，而返回图片呢，更多的是返回图片的字符数组，然后告诉浏览器这是个图片，老哥你按照图片渲染</li></ol><p>直接返回二进制流，上面在介绍文本返回的两种方式中，有个直接通过 HttpServletResponse 向输出流中写数据的方式，我们这里是不是可以直接这么用呢？</p><p>下面给出一个从网络下载图片并返回二进制流的实际 case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回图片
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">imgRsp</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletOutputStream</span> outStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;https://spring.hhui.top/spring-blog/imgs/info/info.png&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">URL</span> uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedImage</span> img <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下上面的实例 case，首先设置了返回的 ContentType，然后借助 ImateIO 来下载图片（个人不太建议这种写法，很容易出现 403；这里演示主要是为了简单…），并将图片写入到输出流</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ol><li>返回数据小结 本篇博文主要介绍了几种常见数据格式的返回使用姿势，本文更多的是一种使用方式的实例 case 演示，并没有涉及到底层的支持原理，也没有过多的提及如何设置响应头，web 交互中常见的 cookies/session 也没有说到，这些将作为下篇的内容引入，恳请关注</li></ol><p>下面做一个简单的小结</p><ul><li>返回纯数据</li></ul><ul><li>添加<code>@ResponseBody</code>注解，则表示我们返回的是数据，而不需要进行视图解析渲染；</li><li>如果一个<code>controller</code>中全部都是返回数据，不会返回视图时，我们可以在添加<code>@RestController</code>注解，然后这个类中的接口都不需要添加@ResponseBody 注解了</li><li>返回视图时，我们会根据接口返回的字符串，结合定义的前缀，后缀，到资源路径的<code>static</code>目录下寻找对应的静态文件返回</li><li>可以直接通过向<code>HttpServletResponse</code>的输出流中写数据的方式来返回数据，如返回图片常用这种 case</li></ul>`,37)]))}const i=s(e,[["render",o],["__file","springboot_return_data.html.vue"]]);export{i as default};
