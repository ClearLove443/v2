import{_ as t,V as n,W as a,a0 as s}from"./framework-7c77a285.js";const l={};function o(i,e){return n(),a("div",null,e[0]||(e[0]=[s(`<h2 id="resource-和-autowired" tabindex="-1"><a class="header-anchor" href="#resource-和-autowired" aria-hidden="true">#</a> @Resource 和@Autowired</h2><ul><li><p><code>@Resource</code>和<code>@Autowired</code>都可以用来装配 bean，都可以用于字段或 setter 方法。</p></li><li><p><code>@Autowired</code>默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许 null 值，可以设置它的 required 属性为 false。</p></li><li><p><code>@Resource</code>默认按名称装配，当找不到与名称匹配的 bean 时才按照类型进行装配。名称可以通过 name 属性指定，如果没有指定 name 属性，当注解写在字段上时，默认取字段名，当注解写在 setter 方法上时，默认取属性名进行装配。</p><blockquote><p>注意：如果 name 属性一旦指定，就只会按照名称进行装配。</p></blockquote></li><li><p><code>@Autowire</code>和<code>@Qualifier</code>配合使用效果和@Resource 一样：</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Example</span> example<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Example</span> example<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@Resource</code>装配顺序</li></ul><ol><li>如果同时指定 name 和 type，则从容器中查找唯一匹配的 bean 装配，找不到则抛出异常</li><li>如果指定 name 属性，则从容器中查找名称匹配的 bean 装配，找不到则抛出异常</li><li>如果指定 type 属性，则从容器中查找类型唯一匹配的 bean 装配，找不到或者找到多个抛出异常</li><li>如果都不指定，则自动按照 byName 方式装配，如果没有匹配，则回退一个原始类型进行匹配，如果匹配则自动装配</li></ol><p>简要对比表格</p><table><thead><tr><th style="text-align:center;">注解对比</th><th style="text-align:center;">@Resource</th><th style="text-align:center;">@Autowire</th></tr></thead><tbody><tr><td style="text-align:center;">注解来源</td><td style="text-align:center;">JDK</td><td style="text-align:center;">Spring</td></tr><tr><td style="text-align:center;">装配方式</td><td style="text-align:center;">优先按名称</td><td style="text-align:center;">优先按类型</td></tr><tr><td style="text-align:center;">属性</td><td style="text-align:center;">name、type</td><td style="text-align:center;">required</td></tr></tbody></table>`,7)]))}const c=t(l,[["render",o],["__file","springboot_resource_autowired.html.vue"]]);export{c as default};
