import{_ as l,V as i,W as a,a0 as d}from"./framework-e0f7ab62.js";const s={};function r(h,e){return i(),a("div",null,[...e[0]||(e[0]=[d('<p>以一个普通用户的角度总结下 WSL 和 WSL2 的区别。 主要从功能、性能两个方面简单说下 WSL2 和 WSL 相比的优势和劣势。本来想单独列下易用性，但发现都可以在功能和性能上体现出来。</p><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><h3 id="wsl2-的优势" tabindex="-1"><a class="header-anchor" href="#wsl2-的优势" aria-hidden="true">#</a> WSL2 的优势</h3><p>因为 WSL2 是跑在虚拟机中的完整 Linux，所以功能方面要比 WSL 强大一些。从目前的版本看，至少能做到如下这些 WSL 做不到的事情（并没有全部核实，可能有出入）：</p><ol><li>网卡管理、网络抓包、查看网络连接状态、防火墙等较底层的网络相关功能。</li><li>挂载文件（如 ext4 文件、squashfs 文件）和网络资源（如 nfs、ssh ）到本地。</li><li>tmpfs （在 /run/shm 或者 /dev/shm，/tmp 不是）。</li><li>完整的 cgroups，因此可以运行 Docker 等容器。</li><li>完整的 IPC （ WSL 缺失一部分，比如运行不了 fakeroot ）。</li><li>可修改内核参数、添加内核模块，以及替换内核。因此可以支持很多更底层的应用。</li><li>因为之上的这些原因，WSL2 可以更好地享受完整 Linux 系统带来的方便，不需要因为 WSL 的功能缺失而使用各种迂回方法。</li></ol><h3 id="wsl2-的劣势" tabindex="-1"><a class="header-anchor" href="#wsl2-的劣势" aria-hidden="true">#</a> WSL2 的劣势</h3><p>功能方面的劣势，主要是和本机系统（即 Windows 宿主机）整合相关的。</p><ol><li>进程不再会显示在任务管理器里，也无法在 WSL2 外操作，包括不再支持本机系统的防火墙规则。</li><li>无法通过 localhost （ 127.0.0.1 ）访问本机系统监听的端口（也许以后会支持。目前用 localhost 是可以从本机系统访问 WSL2 的），只能通过其他 IP。</li><li>默认无法从其他机器访问到 WSL2 中监听的端口，需要在本机系统设置端口转发（如 netsh interface portproxy add ）。 其中 2 和 3 后续都可能优化，技术上没有难题。</li></ol><h3 id="wsl2-的功能缺失-相对于原生的-包括虚拟机中的-linux" tabindex="-1"><a class="header-anchor" href="#wsl2-的功能缺失-相对于原生的-包括虚拟机中的-linux" aria-hidden="true">#</a> WSL2 的功能缺失，相对于原生的（包括虚拟机中的） Linux</h3><ol><li>没有声音、显示系统，和 WSL 一致。但有迂回办法（不包括显卡计算）。</li><li>不能访问本机系统的 USB 设备（但可以访问已经在本机系统挂载的硬盘、U 盘、光盘等）、串口设备（这个 WSL 已经支持，WSL2 之后也会支持）、PCI 设备等等。</li><li>网卡管理相关功能不全，比如不能设置静态 IP、不能桥接、不能访问网卡硬件等等。</li></ol><p>但 WSL2 的文件系统镜像可以直接使用 Hyper-V 挂载（可以一个镜像两用，不能同时运行），这样功能比 WSL2 要强一些（比如有显示系统、网卡管理、串口设备支持、受限的本机硬盘直通等等），但还是有一些功能缺失</p><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h2><p>性能方面，WSL 和 WSL2 各有优势。如果不和本机系统交互，WSL2 的性能非常不错，但访问本机系统的文件会下降很多。</p><h3 id="wsl2-的优势-1" tabindex="-1"><a class="header-anchor" href="#wsl2-的优势-1" aria-hidden="true">#</a> WSL2 的优势</h3><ol><li>进程启动开销大大减少，需要频繁启动进程的场景性能大幅提升。</li><li>本地磁盘（不包括挂载的 <code>/mnt/*</code>）读写性能大幅提升。</li></ol><h3 id="wsl2-的劣势-1" tabindex="-1"><a class="header-anchor" href="#wsl2-的劣势-1" aria-hidden="true">#</a> WSL2 的劣势</h3><ol><li>通过 9p 挂载的本机系统文件（<code>/mnt/*</code>）和 WSL 中的 drvfs 相比，读写性能大幅下降，主要体现在读取大量小文件场景（比如文件数上百后，<code>ls -l</code>、<code>file *</code>、<code>head -n1 *</code>、<code>git status/diff/...</code> 等等命令会有明显卡顿，耗时为 WSL 中的几倍甚至十几倍）。但仅仅列文件名（ ls 要比 ls -l 快几个数量级）或者操作大文件（比如用 dd 读写大文件感觉不到慢）基本没影响。</li><li>内存占用比 WSL 高很多。基本运行起来后就要占 300M 以上（要看 Vmmem 进程，而不是终端模拟器）。而且读写大量本地系统文件（<code>/mnt/*</code>）后内存会飙升，至少有些情况不会回落，即使其他软件将内存快耗尽了 Vmmem 内存占用也不会下降。</li><li>首次启动比 WSL 慢，但平时不需要退出（ wsl --shutdown，可以用它来释放内存），可以认为没影响。 其中 1 也许可以大幅优化，2 之后很可能会优化</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总体说功能上变得更强大了，但和本机系统交互的相关功能有所减弱，用起来没有之前方便了。性能上如果不需要和本机系统交互，提升很显著，但如果需要读写本机系统硬盘的文件，性能下降很明显。</p>',19)])])}const n=l(s,[["render",r],["__file","windows_wsl_wsl2.html.vue"]]);export{n as default};
