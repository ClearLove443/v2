import{_ as s,V as a,W as t,a0 as p}from"./framework-e0f7ab62.js";const e={};function o(c,n){return a(),t("div",null,[...n[0]||(n[0]=[p(`<p>前端开发工作中，经常需要将 HTML 的左右尖括号等转义成实体形式。我们不能把&lt;，&gt;，&amp;等直接显示在最终看到的网页里。需要将其转义后才能在网页上显示。</p><p>转义字符（Escape Sequence）也称字符实体(Character Entity)。定义转义字符串的主要原因是</p><ol><li>“&lt;”和“&gt;”等符号已经用来表示 HTML TAG，因此不能直接当作文本中的符号来使用。但有时需求是在 HTML 页面上使用这些符号，所以需要定义它的转义字符串。</li><li>有些字符在 ASCII 字符集中没有定义（如版权符号“©”）。因此需要使用转义字符（“©”对应的转义字符是“©”）来表示。</li></ol><p>这里提供两个函数 escape 和 unescape，分别实现将 HTML 转义为实体和回转。</p><h1 id="方式一、一个映射表-正则替换" tabindex="-1"><a class="header-anchor" href="#方式一、一个映射表-正则替换" aria-hidden="true">#</a> 方式一、一个映射表+正则替换</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> keys <span class="token operator">=</span>
  Object<span class="token punctuation">.</span>keys <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token keyword">in</span> obj<span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> invert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token keyword">in</span> obj<span class="token punctuation">)</span> result<span class="token punctuation">[</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var entityMap = {
    escape: {
      &#39;&amp;&#39;: &#39;&amp;&#39;,
      &#39;&lt;&#39;: &#39;&lt;&#39;,
      &#39;&gt;&#39;: &#39;&gt;&#39;,
      &#39;&quot;&#39;: &#39;&quot;&#39;,
      &quot;&#39;&quot;: &#39;&#39;&#39;
    }
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
entityMap<span class="token punctuation">.</span>unescape <span class="token operator">=</span> <span class="token function">invert</span><span class="token punctuation">(</span>entityMap<span class="token punctuation">.</span>escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> entityReg <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token function">keys</span><span class="token punctuation">(</span>entityMap<span class="token punctuation">.</span>escape<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">unescape</span><span class="token operator">:</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token function">keys</span><span class="token punctuation">(</span>entityMap<span class="token punctuation">.</span>unescape<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 将HTML转义为实体</span>
<span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> html <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>entityReg<span class="token punctuation">.</span>escape<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> entityMap<span class="token punctuation">.</span>escape<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将实体转回为HTML</span>
<span class="token keyword">function</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>entityReg<span class="token punctuation">.</span>unescape<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> entityMap<span class="token punctuation">.</span>unescape<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="方式二、利用浏览器-dom-api" tabindex="-1"><a class="header-anchor" href="#方式二、利用浏览器-dom-api" aria-hidden="true">#</a> 方式二、利用浏览器 DOM API</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将HTML转义为实体</span>
<span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
  elem<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> elem<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将实体转回为HTML</span>
<span class="token keyword">function</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>
  <span class="token keyword">return</span> elem<span class="token punctuation">.</span>innerText <span class="token operator">||</span> elem<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个缺陷是只能转义“&lt; &gt; &amp; ”，对于单引号，双引号都不转义。另外一些非 ASCII 也不能转义。选择时须注意。</p><h1 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较：</h1><p>方式 1 代码量较大，但灵活性，完整性都比方式 2 强。可根据需求添加或减少映射表 entityMap，且可以运行在任意 JS 环境中。</p><p>方式 2 为 hack 方式，代码量少很多，利用浏览器内部 API 就行了转义和转回（主流浏览器都支持）。不具完整性，很明显只能在浏览器环境中使用（比如不能在 Node.js 中跑）。</p>`,12)])])}const i=s(e,[["render",o],["__file","javascript_3opacq1jP.html.vue"]]);export{i as default};
